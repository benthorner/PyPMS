{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started About pms is a data acquisition and logging tool for for Air Quality Sensors with UART interface. Installation pip python3 -m pip install pypms pipx pipx install pypms Will allow you yo access to sensors via serial port ( pms serial ), and save observations to a csv file ( pms csv ). Install with extras Additional packages are required for pushing observations to an mqtt server ( pms mqtt ), to an influxdb server ( pms influxdb ), or provide a bridge between mqtt and influxdb servers ( pms bridge ). pip python3 -m pip install pypms [ mqtt,influxdb ] pipx pipx install pypms [ mqtt,influxdb ] Command line options pms pms --help Usage: pms [OPTIONS] COMMAND [ARGS]... Data acquisition and logging for Air Quality Sensors with UART interface Options: -m, --sensor-model [HPMA115C0|HPMA115S0|MCU680|MHZ19B|PMS3003|PMS5003S|PMS5003ST|PMS5003T|PMSx003|SDS01x|SDS198|SPS30|ZH0xx] sensor model [default: PMSx003] -s, --serial-port TEXT serial port [default: /dev/ttyUSB0] -i, --interval INTEGER seconds to wait between updates [default: 60] -n, --samples INTEGER stop after N samples --debug print DEBUG/logging messages [default: False] -V, --version --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: bridge Bridge between MQTT and InfluxDB servers csv Read sensor and print measurements influxdb Read sensor and push PM measurements to an InfluxDB server info Information about the sensor observations mqtt Read sensor and push PM measurements to a MQTT server serial Read sensor and print measurements pms info pms info --help Usage: pms info [OPTIONS] Information about the sensor observations Options: --help Show this message and exit. pms serial pms serial --help Usage: pms serial [OPTIONS] Read sensor and print formatted measurements Options: -f, --format [csv|pm|num|raw|cf|atm|hcho|co2|bme|bsec|hexdump] formatted output --decode PATH decode captured messages --help Show this message and exit. pms csv pms csv --help Usage: pms csv [OPTIONS] [PATH] Read sensor and save measurements to a CSV file Arguments: [PATH] csv formatted file Options: --capture write raw messages instead of observations [default: False] --overwrite overwrite file, if already exists [default: False] --help Show this message and exit. pms mqtt pms mqtt --help Usage: pms mqtt [OPTIONS] Read sensor and push PM measurements to a MQTT server Options: -t, --topic TEXT mqtt root/topic [default: homie/test] --mqtt-host TEXT mqtt server [default: mqtt.eclipse.org] --mqtt-port INTEGER server port [default: 1883] --mqtt-user TEXT server username [env var: MQTT_USER] --mqtt-pass TEXT server password [env var: MQTT_PASS] --help Show this message and exit. pms influxdb pms influxdb --help Usage: pms influxdb [OPTIONS] Read sensor and push PM measurements to an InfluxDB server Options: --db-host TEXT database server [default: influxdb] --db-port INTEGER server port [default: 8086] --db-user TEXT server username [env var: DB_USER; default: root] --db-pass TEXT server password [env var: DB_PASS; default: root] --db-name TEXT database name [default: homie] --tags TEXT measurement tags [default: {\"location\": \"test\"}] --help Show this message and exit. pms bridge pms bridge --help Usage: pms bridge [OPTIONS] Bridge between MQTT and InfluxDB servers Options: --mqtt-topic TEXT mqtt root/topic [default: homie/+/+/+] --mqtt-host TEXT mqtt server [default: mqtt.eclipse.org] --mqtt-port INTEGER server port [default: 1883] --mqtt-user TEXT server username [env var: MQTT_USER] --mqtt-pass TEXT server password [env var: MQTT_PASS] --db-host TEXT database server [default: influxdb] --db-port INTEGER server port [default: 8086] --db-user TEXT server username [env var: DB_USER; default: root] --db-pass TEXT server password [env var: DB_PASS; default: root] --db-name TEXT database name [default: homie] --help Show this message and exit.","title":"Getting started"},{"location":"#getting-started","text":"","title":"Getting started"},{"location":"#about","text":"pms is a data acquisition and logging tool for for Air Quality Sensors with UART interface.","title":"About"},{"location":"#installation","text":"pip python3 -m pip install pypms pipx pipx install pypms Will allow you yo access to sensors via serial port ( pms serial ), and save observations to a csv file ( pms csv ).","title":"Installation"},{"location":"#install-with-extras","text":"Additional packages are required for pushing observations to an mqtt server ( pms mqtt ), to an influxdb server ( pms influxdb ), or provide a bridge between mqtt and influxdb servers ( pms bridge ). pip python3 -m pip install pypms [ mqtt,influxdb ] pipx pipx install pypms [ mqtt,influxdb ]","title":"Install with extras"},{"location":"#command-line-options","text":"pms pms --help Usage: pms [OPTIONS] COMMAND [ARGS]... Data acquisition and logging for Air Quality Sensors with UART interface Options: -m, --sensor-model [HPMA115C0|HPMA115S0|MCU680|MHZ19B|PMS3003|PMS5003S|PMS5003ST|PMS5003T|PMSx003|SDS01x|SDS198|SPS30|ZH0xx] sensor model [default: PMSx003] -s, --serial-port TEXT serial port [default: /dev/ttyUSB0] -i, --interval INTEGER seconds to wait between updates [default: 60] -n, --samples INTEGER stop after N samples --debug print DEBUG/logging messages [default: False] -V, --version --install-completion [bash|zsh|fish|powershell|pwsh] Install completion for the specified shell. --show-completion [bash|zsh|fish|powershell|pwsh] Show completion for the specified shell, to copy it or customize the installation. --help Show this message and exit. Commands: bridge Bridge between MQTT and InfluxDB servers csv Read sensor and print measurements influxdb Read sensor and push PM measurements to an InfluxDB server info Information about the sensor observations mqtt Read sensor and push PM measurements to a MQTT server serial Read sensor and print measurements pms info pms info --help Usage: pms info [OPTIONS] Information about the sensor observations Options: --help Show this message and exit. pms serial pms serial --help Usage: pms serial [OPTIONS] Read sensor and print formatted measurements Options: -f, --format [csv|pm|num|raw|cf|atm|hcho|co2|bme|bsec|hexdump] formatted output --decode PATH decode captured messages --help Show this message and exit. pms csv pms csv --help Usage: pms csv [OPTIONS] [PATH] Read sensor and save measurements to a CSV file Arguments: [PATH] csv formatted file Options: --capture write raw messages instead of observations [default: False] --overwrite overwrite file, if already exists [default: False] --help Show this message and exit. pms mqtt pms mqtt --help Usage: pms mqtt [OPTIONS] Read sensor and push PM measurements to a MQTT server Options: -t, --topic TEXT mqtt root/topic [default: homie/test] --mqtt-host TEXT mqtt server [default: mqtt.eclipse.org] --mqtt-port INTEGER server port [default: 1883] --mqtt-user TEXT server username [env var: MQTT_USER] --mqtt-pass TEXT server password [env var: MQTT_PASS] --help Show this message and exit. pms influxdb pms influxdb --help Usage: pms influxdb [OPTIONS] Read sensor and push PM measurements to an InfluxDB server Options: --db-host TEXT database server [default: influxdb] --db-port INTEGER server port [default: 8086] --db-user TEXT server username [env var: DB_USER; default: root] --db-pass TEXT server password [env var: DB_PASS; default: root] --db-name TEXT database name [default: homie] --tags TEXT measurement tags [default: {\"location\": \"test\"}] --help Show this message and exit. pms bridge pms bridge --help Usage: pms bridge [OPTIONS] Bridge between MQTT and InfluxDB servers Options: --mqtt-topic TEXT mqtt root/topic [default: homie/+/+/+] --mqtt-host TEXT mqtt server [default: mqtt.eclipse.org] --mqtt-port INTEGER server port [default: 1883] --mqtt-user TEXT server username [env var: MQTT_USER] --mqtt-pass TEXT server password [env var: MQTT_PASS] --db-host TEXT database server [default: influxdb] --db-port INTEGER server port [default: 8086] --db-user TEXT server username [env var: DB_USER; default: root] --db-pass TEXT server password [env var: DB_PASS; default: root] --db-name TEXT database name [default: homie] --help Show this message and exit.","title":"Command line options"},{"location":"library_usage/","text":"Use as a library PyPMS / pms is meant as a command line application. This section contain some help for those brave enough to use its internals as a library. Basic examples read one sensor \"\"\" Read PMSx003 sensor on /dev/ttyUSB0. Read 4 samples, one sample every 20 seconds, and print the observations on different formats. \"\"\" from pms.core import SensorReader reader = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval = 20 , samples = 4 ) print ( \" \\n PMSx003 4 samples on default format\" ) with reader : for obs in reader (): print ( obs ) print ( \" \\n PMSx003 4 samples on CSV format\" ) with reader : for obs in reader (): print ( f \" { obs : csv } \" ) print ( \" \\n PMSx003 4 samples on CSV format with header\" ) with reader : print_header = True for obs in reader (): if print_header : print ( f \" { obs : header } \" ) print_header = False print ( f \" { obs : csv } \" ) PMSx003 4 samples on default format 2021-07-29 15:57:01: PM1 1.0, PM2.5 11.0, PM10 12.0 \u03bcg/m3 2021-07-29 15:57:21: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2021-07-29 15:57:41: PM1 0.0, PM2.5 1.0, PM10 2.0 \u03bcg/m3 2021-07-29 15:58:01: PM1 0.0, PM2.5 1.0, PM10 2.0 \u03bcg/m3 PMSx003 4 samples on CSV format 1627567094, 2, 10, 12, 2.0, 10.0, 12.0, 4.35, 1.42, 0.52, 0.30, 0.00, 0.00 1627567114, 1, 7, 7, 1.0, 7.0, 7.0, 4.53, 1.44, 0.30, 0.09, 0.00, 0.00 1627567134, 1, 1, 2, 1.0, 1.0, 2.0, 3.27, 1.09, 0.09, 0.03, 0.03, 0.00 1627567154, 1, 1, 2, 1.0, 1.0, 2.0, 4.65, 1.44, 0.03, 0.00, 0.00, 0.00 PMSx003 4 samples on CSV format with header time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 1627567167, 2, 12, 15, 2.0, 12.0, 15.0, 5.70, 1.86, 0.68, 0.34, 0.00, 0.00 1627567187, 2, 8, 8, 2.0, 8.0, 8.0, 3.39, 1.13, 0.23, 0.09, 0.00, 0.00 1627567207, 1, 1, 1, 1.0, 1.0, 1.0, 4.26, 1.39, 0.12, 0.00, 0.00, 0.00 1627567227, 2, 2, 2, 2.0, 2.0, 2.0, 3.63, 1.21, 0.03, 0.00, 0.00, 0.00 read two sensors \"\"\" Read PMSx003 sensor on /dev/ttyUSB0 and MCU680 sensor on /dev/ttyUSB1 Read 4 samples from each sensor, one sample every 20 seconds, and print the observations on different formats. \"\"\" from pms.core import SensorReader pms = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval = 20 , samples = 4 ) bme = SensorReader ( \"MCU680\" , \"/dev/ttyUSB1\" , interval = 20 , samples = 4 ) print ( \" \\n PMSx003 and MCU680, 4 samples each on default formats\" ) with pms , bme : for pm , bm in zip ( pms (), bme ()): print ( pm ) print ( bm ) print ( \" \\n PMSx003 and MCU680, 4 samples each on CSV format\" ) with pms , bme : for pm , bm in zip ( pms (), bme ()): print ( f \"PMSx003, { pm : csv } , MCU680, { bm : csv } \" ) print ( \" \\n PMSx003 and MCU680, 4 samples each on CSV format with header\" ) with pms , bme : print_header = True for pm , bm in zip ( pms (), bme ()): if print_header : print ( f \"PMSx003, { pm : header } , MCU680, { bm : header } \" ) print_header = False print ( f \"PMSx003, { pm : csv } , MCU680, { bm : csv } \" ) PMSx003 and MCU680, 4 samples each on default formats 2021-07-29 16:01:34: PM1 1.0, PM2.5 12.0, PM10 13.0 \u03bcg/m3 2021-07-29 16:01:36: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 988.94 hPa, 463.6 k\u03a9 2021-07-29 16:01:54: PM1 1.0, PM2.5 5.0, PM10 5.0 \u03bcg/m3 2021-07-29 16:01:58: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 989.00 hPa, 464.9 k\u03a9 2021-07-29 16:02:14: PM1 0.0, PM2.5 0.0, PM10 1.0 \u03bcg/m3 2021-07-29 16:02:20: Temp. 25.1 \u00b0C, Rel.Hum. 48.2 %, Press 988.98 hPa, 467.2 k\u03a9 2021-07-29 16:02:34: PM1 0.0, PM2.5 0.0, PM10 1.0 \u03bcg/m3 2021-07-29 16:02:42: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 988.98 hPa, 467.5 k\u03a9 PMSx003 and MCU680, 4 samples each on CSV format PMSx003, 1627567375, 1, 10, 12, 1.0, 10.0, 12.0, 4.53, 1.44, 0.56, 0.30, 0.00, 0.00, MCU680, 1627567378, 25.1, 48.2, 988.94, 257, 28, 469.8, 204 PMSx003, 1627567395, 1, 6, 7, 1.0, 6.0, 7.0, 4.86, 1.52, 0.16, 0.09, 0.00, 0.00, MCU680, 1627567400, 25.0, 48.5, 988.98, 257, 27, 470.8, 204 PMSx003, 1627567415, 2, 3, 3, 2.0, 3.0, 3.0, 2.37, 0.75, 0.03, 0.00, 0.00, 0.00, MCU680, 1627567421, 25.1, 48.2, 988.94, 257, 17, 475.8, 204 PMSx003, 1627567435, 0, 0, 0, 0.0, 0.0, 0.0, 2.97, 0.92, 0.03, 0.03, 0.00, 0.00, MCU680, 1627567443, 25.0, 48.2, 989.00, 257, 27, 474.1, 203 PMSx003 and MCU680, 4 samples each on CSV format with header PMSx003, time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0, MCU680, time, temp, rhum, pres, IAQ_acc, IAQ, gas, alt PMSx003, 1627567457, 1, 10, 12, 1.0, 10.0, 12.0, 4.50, 1.46, 0.60, 0.30, 0.00, 0.00, MCU680, 1627567459, 25.1, 48.2, 989.00, 257, 30, 472.8, 203 PMSx003, 1627567477, 2, 7, 7, 2.0, 7.0, 7.0, 3.87, 1.29, 0.24, 0.09, 0.00, 0.00, MCU680, 1627567481, 25.1, 48.2, 988.94, 257, 30, 474.5, 204 PMSx003, 1627567497, 1, 2, 2, 1.0, 2.0, 2.0, 3.06, 1.02, 0.10, 0.00, 0.00, 0.00, MCU680, 1627567503, 25.1, 48.1, 989.00, 258, 34, 473.1, 203 PMSx003, 1627567517, 0, 0, 0, 0.0, 0.0, 0.0, 2.16, 0.72, 0.00, 0.00, 0.00, 0.00, MCU680, 1627567525, 25.1, 47.9, 988.96, 259, 50, 467.8, 204 Observation data fields Each sensor provides different data fields. The pms -m SENSOR_MODEL info command will provide information about data fields and their units. The following table shows all possible data fields and the type provided by each sensor: particulate matter --sensor-model pm01 pm25 pms04 pm10 pm100 raw01 raw25 raw10 PMS3003 int int int int int int PMSx003 int int int int int int PMS5003S int int int int int int PMS5003ST int int int int int int PMS5003T int int int int int int SDS01x float float SDS198 int HPMA115S0 int int HPMA115C0 int int int int SPS30 float float float float ZH0xx int int int MHZ19B MCU680 number count --sensor-model n0_3 n0_5 n1_0 n2_5 n4_0 n5_0 n10_0 PMS3003 float float float float float float PMSx003 float float float float float float PMS5003S float float float float float float PMS5003ST float float float float float float PMS5003T float float float float SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 float float float float float ZH0xx MHZ19B MCU680 environmental --sensor-model time temp rhum pres HCHO CO2 PMS3003 int PMSx003 int PMS5003S int int PMS5003ST int float float int PMS5003T int float float SDS01x int SDS198 int HPMA115S0 int HPMA115C0 int SPS30 int ZH0xx int MHZ19B int int MCU680 int float float float other --sensor-model diam IAQ_acc IAQ gas alt PMS3003 PMSx003 PMS5003S PMS5003ST PMS5003T SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 float ZH0xx MHZ19B MCU680 int int int int On the previous example, obs is a dataclasses.dataclass instance which an be inspected as follows \"\"\"Inspect sensor data fields\"\"\" from dataclasses import fields from typing import Dict from pms.core import Sensor from pms.core.types import ObsData def field_types ( obs : ObsData ) -> Dict [ str , str ]: \"\"\"return a dictionary containing the type of each data field\"\"\" return { field . name : field . type . __name__ for field in fields ( obs )} for sensor in Sensor : print ( sensor ) print ( field_types ( sensor . Data )) HPMA115C0 {'time': 'int', 'pm01': 'int', 'pm25': 'int', 'pm04': 'int', 'pm10': 'int'} HPMA115S0 {'time': 'int', 'pm25': 'int', 'pm10': 'int'} MCU680 {'time': 'int', 'temp': 'float', 'rhum': 'float', 'pres': 'float', 'IAQ_acc': 'int', 'IAQ': 'int', 'gas': 'int', 'alt': 'int'} MHZ19B {'time': 'int', 'CO2': 'int'} PMS3003 {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int'} PMS5003S {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float', 'HCHO': 'float'} PMS5003ST {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float', 'HCHO': 'float', 'temp': 'float', 'rhum': 'float'} PMS5003T {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'temp': 'float', 'rhum': 'float'} PMSx003 {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float'} SDS01x {'time': 'int', 'pm25': 'float', 'pm10': 'float'} SDS198 {'time': 'int', 'pm100': 'int'} SPS30 {'time': 'int', 'pm01': 'float', 'pm25': 'float', 'pm04': 'float', 'pm10': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n4_0': 'float', 'n10_0': 'float', 'diam': 'float'} ZH0xx {'time': 'int', 'pm25': 'int', 'pm10': 'int', 'pm01': 'int'} Observation formats As the example at the top of the page shows, the obs object has custom formats. Observations from different sensors support different formats. The following table shows all different formats --sensor-model csv header pm num raw cf atm hcho co2 bme bsec PMS3003 PMSx003 PMS5003T PMS5003S PMS5003ST SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 ZH0xx MHZ19B MCU680","title":"Intro"},{"location":"library_usage/#use-as-a-library","text":"PyPMS / pms is meant as a command line application. This section contain some help for those brave enough to use its internals as a library.","title":"Use as a library"},{"location":"library_usage/#basic-examples","text":"read one sensor \"\"\" Read PMSx003 sensor on /dev/ttyUSB0. Read 4 samples, one sample every 20 seconds, and print the observations on different formats. \"\"\" from pms.core import SensorReader reader = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval = 20 , samples = 4 ) print ( \" \\n PMSx003 4 samples on default format\" ) with reader : for obs in reader (): print ( obs ) print ( \" \\n PMSx003 4 samples on CSV format\" ) with reader : for obs in reader (): print ( f \" { obs : csv } \" ) print ( \" \\n PMSx003 4 samples on CSV format with header\" ) with reader : print_header = True for obs in reader (): if print_header : print ( f \" { obs : header } \" ) print_header = False print ( f \" { obs : csv } \" ) PMSx003 4 samples on default format 2021-07-29 15:57:01: PM1 1.0, PM2.5 11.0, PM10 12.0 \u03bcg/m3 2021-07-29 15:57:21: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2021-07-29 15:57:41: PM1 0.0, PM2.5 1.0, PM10 2.0 \u03bcg/m3 2021-07-29 15:58:01: PM1 0.0, PM2.5 1.0, PM10 2.0 \u03bcg/m3 PMSx003 4 samples on CSV format 1627567094, 2, 10, 12, 2.0, 10.0, 12.0, 4.35, 1.42, 0.52, 0.30, 0.00, 0.00 1627567114, 1, 7, 7, 1.0, 7.0, 7.0, 4.53, 1.44, 0.30, 0.09, 0.00, 0.00 1627567134, 1, 1, 2, 1.0, 1.0, 2.0, 3.27, 1.09, 0.09, 0.03, 0.03, 0.00 1627567154, 1, 1, 2, 1.0, 1.0, 2.0, 4.65, 1.44, 0.03, 0.00, 0.00, 0.00 PMSx003 4 samples on CSV format with header time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 1627567167, 2, 12, 15, 2.0, 12.0, 15.0, 5.70, 1.86, 0.68, 0.34, 0.00, 0.00 1627567187, 2, 8, 8, 2.0, 8.0, 8.0, 3.39, 1.13, 0.23, 0.09, 0.00, 0.00 1627567207, 1, 1, 1, 1.0, 1.0, 1.0, 4.26, 1.39, 0.12, 0.00, 0.00, 0.00 1627567227, 2, 2, 2, 2.0, 2.0, 2.0, 3.63, 1.21, 0.03, 0.00, 0.00, 0.00 read two sensors \"\"\" Read PMSx003 sensor on /dev/ttyUSB0 and MCU680 sensor on /dev/ttyUSB1 Read 4 samples from each sensor, one sample every 20 seconds, and print the observations on different formats. \"\"\" from pms.core import SensorReader pms = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval = 20 , samples = 4 ) bme = SensorReader ( \"MCU680\" , \"/dev/ttyUSB1\" , interval = 20 , samples = 4 ) print ( \" \\n PMSx003 and MCU680, 4 samples each on default formats\" ) with pms , bme : for pm , bm in zip ( pms (), bme ()): print ( pm ) print ( bm ) print ( \" \\n PMSx003 and MCU680, 4 samples each on CSV format\" ) with pms , bme : for pm , bm in zip ( pms (), bme ()): print ( f \"PMSx003, { pm : csv } , MCU680, { bm : csv } \" ) print ( \" \\n PMSx003 and MCU680, 4 samples each on CSV format with header\" ) with pms , bme : print_header = True for pm , bm in zip ( pms (), bme ()): if print_header : print ( f \"PMSx003, { pm : header } , MCU680, { bm : header } \" ) print_header = False print ( f \"PMSx003, { pm : csv } , MCU680, { bm : csv } \" ) PMSx003 and MCU680, 4 samples each on default formats 2021-07-29 16:01:34: PM1 1.0, PM2.5 12.0, PM10 13.0 \u03bcg/m3 2021-07-29 16:01:36: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 988.94 hPa, 463.6 k\u03a9 2021-07-29 16:01:54: PM1 1.0, PM2.5 5.0, PM10 5.0 \u03bcg/m3 2021-07-29 16:01:58: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 989.00 hPa, 464.9 k\u03a9 2021-07-29 16:02:14: PM1 0.0, PM2.5 0.0, PM10 1.0 \u03bcg/m3 2021-07-29 16:02:20: Temp. 25.1 \u00b0C, Rel.Hum. 48.2 %, Press 988.98 hPa, 467.2 k\u03a9 2021-07-29 16:02:34: PM1 0.0, PM2.5 0.0, PM10 1.0 \u03bcg/m3 2021-07-29 16:02:42: Temp. 25.1 \u00b0C, Rel.Hum. 48.3 %, Press 988.98 hPa, 467.5 k\u03a9 PMSx003 and MCU680, 4 samples each on CSV format PMSx003, 1627567375, 1, 10, 12, 1.0, 10.0, 12.0, 4.53, 1.44, 0.56, 0.30, 0.00, 0.00, MCU680, 1627567378, 25.1, 48.2, 988.94, 257, 28, 469.8, 204 PMSx003, 1627567395, 1, 6, 7, 1.0, 6.0, 7.0, 4.86, 1.52, 0.16, 0.09, 0.00, 0.00, MCU680, 1627567400, 25.0, 48.5, 988.98, 257, 27, 470.8, 204 PMSx003, 1627567415, 2, 3, 3, 2.0, 3.0, 3.0, 2.37, 0.75, 0.03, 0.00, 0.00, 0.00, MCU680, 1627567421, 25.1, 48.2, 988.94, 257, 17, 475.8, 204 PMSx003, 1627567435, 0, 0, 0, 0.0, 0.0, 0.0, 2.97, 0.92, 0.03, 0.03, 0.00, 0.00, MCU680, 1627567443, 25.0, 48.2, 989.00, 257, 27, 474.1, 203 PMSx003 and MCU680, 4 samples each on CSV format with header PMSx003, time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0, MCU680, time, temp, rhum, pres, IAQ_acc, IAQ, gas, alt PMSx003, 1627567457, 1, 10, 12, 1.0, 10.0, 12.0, 4.50, 1.46, 0.60, 0.30, 0.00, 0.00, MCU680, 1627567459, 25.1, 48.2, 989.00, 257, 30, 472.8, 203 PMSx003, 1627567477, 2, 7, 7, 2.0, 7.0, 7.0, 3.87, 1.29, 0.24, 0.09, 0.00, 0.00, MCU680, 1627567481, 25.1, 48.2, 988.94, 257, 30, 474.5, 204 PMSx003, 1627567497, 1, 2, 2, 1.0, 2.0, 2.0, 3.06, 1.02, 0.10, 0.00, 0.00, 0.00, MCU680, 1627567503, 25.1, 48.1, 989.00, 258, 34, 473.1, 203 PMSx003, 1627567517, 0, 0, 0, 0.0, 0.0, 0.0, 2.16, 0.72, 0.00, 0.00, 0.00, 0.00, MCU680, 1627567525, 25.1, 47.9, 988.96, 259, 50, 467.8, 204","title":"Basic examples"},{"location":"library_usage/#observation-data-fields","text":"Each sensor provides different data fields. The pms -m SENSOR_MODEL info command will provide information about data fields and their units. The following table shows all possible data fields and the type provided by each sensor: particulate matter --sensor-model pm01 pm25 pms04 pm10 pm100 raw01 raw25 raw10 PMS3003 int int int int int int PMSx003 int int int int int int PMS5003S int int int int int int PMS5003ST int int int int int int PMS5003T int int int int int int SDS01x float float SDS198 int HPMA115S0 int int HPMA115C0 int int int int SPS30 float float float float ZH0xx int int int MHZ19B MCU680 number count --sensor-model n0_3 n0_5 n1_0 n2_5 n4_0 n5_0 n10_0 PMS3003 float float float float float float PMSx003 float float float float float float PMS5003S float float float float float float PMS5003ST float float float float float float PMS5003T float float float float SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 float float float float float ZH0xx MHZ19B MCU680 environmental --sensor-model time temp rhum pres HCHO CO2 PMS3003 int PMSx003 int PMS5003S int int PMS5003ST int float float int PMS5003T int float float SDS01x int SDS198 int HPMA115S0 int HPMA115C0 int SPS30 int ZH0xx int MHZ19B int int MCU680 int float float float other --sensor-model diam IAQ_acc IAQ gas alt PMS3003 PMSx003 PMS5003S PMS5003ST PMS5003T SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 float ZH0xx MHZ19B MCU680 int int int int On the previous example, obs is a dataclasses.dataclass instance which an be inspected as follows \"\"\"Inspect sensor data fields\"\"\" from dataclasses import fields from typing import Dict from pms.core import Sensor from pms.core.types import ObsData def field_types ( obs : ObsData ) -> Dict [ str , str ]: \"\"\"return a dictionary containing the type of each data field\"\"\" return { field . name : field . type . __name__ for field in fields ( obs )} for sensor in Sensor : print ( sensor ) print ( field_types ( sensor . Data )) HPMA115C0 {'time': 'int', 'pm01': 'int', 'pm25': 'int', 'pm04': 'int', 'pm10': 'int'} HPMA115S0 {'time': 'int', 'pm25': 'int', 'pm10': 'int'} MCU680 {'time': 'int', 'temp': 'float', 'rhum': 'float', 'pres': 'float', 'IAQ_acc': 'int', 'IAQ': 'int', 'gas': 'int', 'alt': 'int'} MHZ19B {'time': 'int', 'CO2': 'int'} PMS3003 {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int'} PMS5003S {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float', 'HCHO': 'float'} PMS5003ST {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float', 'HCHO': 'float', 'temp': 'float', 'rhum': 'float'} PMS5003T {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'temp': 'float', 'rhum': 'float'} PMSx003 {'time': 'int', 'raw01': 'int', 'raw25': 'int', 'raw10': 'int', 'pm01': 'int', 'pm25': 'int', 'pm10': 'int', 'n0_3': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n5_0': 'float', 'n10_0': 'float'} SDS01x {'time': 'int', 'pm25': 'float', 'pm10': 'float'} SDS198 {'time': 'int', 'pm100': 'int'} SPS30 {'time': 'int', 'pm01': 'float', 'pm25': 'float', 'pm04': 'float', 'pm10': 'float', 'n0_5': 'float', 'n1_0': 'float', 'n2_5': 'float', 'n4_0': 'float', 'n10_0': 'float', 'diam': 'float'} ZH0xx {'time': 'int', 'pm25': 'int', 'pm10': 'int', 'pm01': 'int'}","title":"Observation data fields"},{"location":"library_usage/#observation-formats","text":"As the example at the top of the page shows, the obs object has custom formats. Observations from different sensors support different formats. The following table shows all different formats --sensor-model csv header pm num raw cf atm hcho co2 bme bsec PMS3003 PMSx003 PMS5003T PMS5003S PMS5003ST SDS01x SDS198 HPMA115S0 HPMA115C0 SPS30 ZH0xx MHZ19B MCU680","title":"Observation formats"},{"location":"sqlite_example/","text":"SQLite examples raw sensor messages #!/usr/bin/env python3 \"\"\" Read raw messages from 2 different sensors and store them on a sqlite DB. After reading the sensor, decode all messages on DB and print them. - PMSx003 senor on /dev/ttyUSB0 - MCU680 sensor on /dev/ttyUSB1 - read 4 samples for each sensor, by default - read one sample from each sensor every 20 seconds, by default NOTE: When reading 2 or more sensors only the timing of the first sensor is guarantied. In this example, the second sensor will be read right after the first sensor. \"\"\" import sqlite3 from contextlib import closing , contextmanager from pathlib import Path from typing import Callable , ContextManager , Generator from typer import Argument , Option , progressbar from pms.core import Sensor , SensorReader from pms.core.reader import ObsData , RawData def main ( db_path : Path = Argument ( Path ( \"pypms.sqlite\" ), help = \"sensor messages DB\" ), samples : int = Option ( 4 , \"--samples\" , \"-n\" ), interval : int = Option ( 20 , \"--interval\" , \"-i\" ), ): \"\"\" Read raw messages from 2 different sensors (PMSx003 on /dev/ttyUSB0 and MCU680 on /dev/ttyUSB1) and store them on a sqlite DB. After reading the sensor, decode all messages on DB and print them. \"\"\" # get DB context manager message_db = pypms_db ( db_path ) reader = dict ( pms = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval , samples ), bme = SensorReader ( \"MCU680\" , \"/dev/ttyUSB1\" , interval , samples ), ) # read from each sensor and write to DB with message_db () as db , reader [ \"pms\" ] as pms , reader [ \"bme\" ] as bme : # read one obs from each sensor at the time with progressbar ( zip ( pms ( raw = True ), bme ( raw = True )), length = samples , label = \"reading sensors\" ) as progress : for pms_obs , env_obs in progress : write_message ( db , pms . sensor , pms_obs ) write_message ( db , bme . sensor , env_obs ) # read and decode all messages on the DB with message_db () as db : # extract obs from one sensor at the time for sensor in [ r . sensor for r in reader . values ()]: print ( sensor ) for obs in read_obs ( db , sensor ): print ( obs ) def pypms_db ( db_path : Path ) -> Callable [[], ContextManager [ sqlite3 . Connection ]]: \"\"\" create db and messages table, if do not exists already and return a context manager for a DB connection \"\"\" @contextmanager def connect () -> Generator [ sqlite3 . Connection , None , None ]: db = sqlite3 . connect ( str ( db_path )) try : yield db except sqlite3 . Error as e : exit ( e ) finally : db . close () create_table = \"\"\" CREATE TABLE IF NOT EXISTS messages ( time DATETIME NOT NULL, sensor TEXT NOT NULL, message BLOB NOT NULL, UNIQUE (time, sensor) ); \"\"\" with connect () as db , db , closing ( db . cursor ()) as cur : cur . executescript ( create_table ) return connect def write_message ( db : sqlite3 . Connection , sensor : Sensor , message : RawData ): \"\"\"insert raw messages into the DB\"\"\" insert = \"\"\" INSERT OR IGNORE INTO messages (time, sensor, message) VALUES (?, ?, ?); \"\"\" with db , closing ( db . cursor ()) as cur : cur . execute ( insert , ( message . time , sensor . name , message . data )) def read_obs ( db : sqlite3 . Connection , sensor : Sensor ) -> Generator [ ObsData , None , None ]: \"\"\"read messages from DB and return decoded observations\"\"\" select = \"\"\" SELECT message, time FROM messages WHERE sensor IS ? ORDER BY time; \"\"\" decode = lambda row : sensor . decode ( row [ 0 ], time = row [ 1 ]) with closing ( db . cursor ()) as cur : cur . execute ( select , ( sensor . name ,)) return ( decode ( row ) for row in cur . fetchall ()) if __name__ == \"__main__\" : from typer import run try : run ( main ) except KeyboardInterrupt : print ( \"\" ) sensor measurements #!/usr/bin/env python3 \"\"\" Read measurements from 2 different sensors and store them on a sqlite DB as a \"tall table\" with a \"wide table\" view for each sensor. After reading the sensor, get all measurements from the DB amd print them by sensor. - PMSx003 senor on /dev/ttyUSB0 - MCU680 sensor on /dev/ttyUSB1 - read 4 samples for each sensor, by default - read one sample from each sensor every 20 seconds, by default NOTE: the read_obs function creates a subclass of sensor.Data in order to avoid the callin to __post_init__, as this was already tone when the sensor message was decoded. Please open an issue or submit a PR i you know of a cleaner way to achieve this. \"\"\" import sqlite3 from contextlib import closing , contextmanager from dataclasses import asdict , dataclass , fields from pathlib import Path from typing import Callable , ContextManager , Generator from typer import Argument , Option , progressbar from pms.core import Sensor , SensorReader from pms.core.reader import ObsData def main ( db_path : Path = Argument ( Path ( \"pypms.sqlite\" ), help = \"sensor measurements DB\" ), samples : int = Option ( 4 , \"--samples\" , \"-n\" ), interval : int = Option ( 20 , \"--interval\" , \"-i\" ), ): \"\"\" Read measurements from 2 different sensors (PMSx003 on /dev/ttyUSB0 and MCU680 on /dev/ttyUSB1) and store them on a sqlite DB as a \"tall table\" with a \"wide table\" view for each sensor. After reading the sensors, get all measurements from the DB amd print them by sensor. \"\"\" # get DB context manager measurements_db = pypms_db ( db_path ) reader = dict ( pms = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval , samples ), bme = SensorReader ( \"MCU680\" , \"/dev/ttyUSB1\" , interval , samples ), ) # read from each sensor and write to DB with measurements_db () as db , reader [ \"pms\" ] as pms , reader [ \"bme\" ] as bme : # read one obs from each sensor at the time with progressbar ( zip ( pms (), bme ()), length = samples , label = \"reading sensors\" ) as progress : for pms_obs , env_obs in progress : write_measurements ( db , pms . sensor , pms_obs ) write_measurements ( db , bme . sensor , env_obs ) # read all measurements on the DB and reconstruct sensor.Data objects with measurements_db () as db : # extract obs from one sensor at the time for sensor in [ r . sensor for r in reader . values ()]: print ( sensor ) for obs in read_obs ( db , sensor ): print ( obs ) def pypms_db ( db_path : Path ) -> Callable [[], ContextManager [ sqlite3 . Connection ]]: \"\"\" create db and table and update sensor views, if do not exists already and return a context managet for a DB connection \"\"\" @contextmanager def connect () -> Generator [ sqlite3 . Connection , None , None ]: db = sqlite3 . connect ( str ( db_path )) try : yield db except sqlite3 . Error as e : exit ( e ) finally : db . close () create_table = \"\"\" CREATE TABLE IF NOT EXISTS measurements ( time DATETIME NOT NULL, sensor TEXT NOT NULL, field TEXT NOT NULL, value NUMERIC NOT NULL, UNIQUE (time, sensor, field) ); \"\"\" with connect () as db , db , closing ( db . cursor ()) as cur : cur . executescript ( create_table ) # create a \"wide table\" view for every suppoorted sensor for sensor in Sensor : view_fields = \", \\n \" . join ( f \"MAX(CASE WHEN field=' { field . name } ' THEN value ELSE NULL END) { field . name } \" for field in fields ( sensor . Data ) if field . name != \"time\" ) sensor_view = f \"\"\" CREATE VIEW IF NOT EXISTS { sensor . name } AS SELECT MAX(time) time, { view_fields } FROM measurements WHERE sensor IS ' { sensor . name } ' GROUP BY time ORDER BY time; \"\"\" cur . executescript ( sensor_view ) return connect def write_measurements ( db : sqlite3 . Connection , sensor : Sensor , obs : ObsData ): \"\"\"insert raw messages into the DB\"\"\" insert = \"\"\" INSERT OR IGNORE INTO measurements (time, sensor, field, value) VALUES (?, ?, ?, ?); \"\"\" values = ( ( obs . time , sensor . name , field , value ) for field , value in asdict ( obs ) . items () if field != \"time\" ) with db , closing ( db . cursor ()) as cur : cur . executemany ( insert , values ) def read_obs ( db : sqlite3 . Connection , sensor : Sensor ) -> Generator [ ObsData , None , None ]: \"\"\"read measurements from DB and return observations\"\"\" @dataclass class NewObs ( sensor . Data ): # type: ignore[name-defined] def __post_init__ ( self ): \"\"\"avoid call to post-init, this was already done when the message was decoded\"\"\" pass with closing ( db . cursor ()) as cur : cur . execute ( f \"SELECT * FROM { sensor . name } ;\" ) return ( NewObs ( * row ) for row in cur . fetchall ()) if __name__ == \"__main__\" : from typer import run try : run ( main ) except KeyboardInterrupt : print ( \"\" )","title":"SQLite examples"},{"location":"sqlite_example/#sqlite-examples","text":"raw sensor messages #!/usr/bin/env python3 \"\"\" Read raw messages from 2 different sensors and store them on a sqlite DB. After reading the sensor, decode all messages on DB and print them. - PMSx003 senor on /dev/ttyUSB0 - MCU680 sensor on /dev/ttyUSB1 - read 4 samples for each sensor, by default - read one sample from each sensor every 20 seconds, by default NOTE: When reading 2 or more sensors only the timing of the first sensor is guarantied. In this example, the second sensor will be read right after the first sensor. \"\"\" import sqlite3 from contextlib import closing , contextmanager from pathlib import Path from typing import Callable , ContextManager , Generator from typer import Argument , Option , progressbar from pms.core import Sensor , SensorReader from pms.core.reader import ObsData , RawData def main ( db_path : Path = Argument ( Path ( \"pypms.sqlite\" ), help = \"sensor messages DB\" ), samples : int = Option ( 4 , \"--samples\" , \"-n\" ), interval : int = Option ( 20 , \"--interval\" , \"-i\" ), ): \"\"\" Read raw messages from 2 different sensors (PMSx003 on /dev/ttyUSB0 and MCU680 on /dev/ttyUSB1) and store them on a sqlite DB. After reading the sensor, decode all messages on DB and print them. \"\"\" # get DB context manager message_db = pypms_db ( db_path ) reader = dict ( pms = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval , samples ), bme = SensorReader ( \"MCU680\" , \"/dev/ttyUSB1\" , interval , samples ), ) # read from each sensor and write to DB with message_db () as db , reader [ \"pms\" ] as pms , reader [ \"bme\" ] as bme : # read one obs from each sensor at the time with progressbar ( zip ( pms ( raw = True ), bme ( raw = True )), length = samples , label = \"reading sensors\" ) as progress : for pms_obs , env_obs in progress : write_message ( db , pms . sensor , pms_obs ) write_message ( db , bme . sensor , env_obs ) # read and decode all messages on the DB with message_db () as db : # extract obs from one sensor at the time for sensor in [ r . sensor for r in reader . values ()]: print ( sensor ) for obs in read_obs ( db , sensor ): print ( obs ) def pypms_db ( db_path : Path ) -> Callable [[], ContextManager [ sqlite3 . Connection ]]: \"\"\" create db and messages table, if do not exists already and return a context manager for a DB connection \"\"\" @contextmanager def connect () -> Generator [ sqlite3 . Connection , None , None ]: db = sqlite3 . connect ( str ( db_path )) try : yield db except sqlite3 . Error as e : exit ( e ) finally : db . close () create_table = \"\"\" CREATE TABLE IF NOT EXISTS messages ( time DATETIME NOT NULL, sensor TEXT NOT NULL, message BLOB NOT NULL, UNIQUE (time, sensor) ); \"\"\" with connect () as db , db , closing ( db . cursor ()) as cur : cur . executescript ( create_table ) return connect def write_message ( db : sqlite3 . Connection , sensor : Sensor , message : RawData ): \"\"\"insert raw messages into the DB\"\"\" insert = \"\"\" INSERT OR IGNORE INTO messages (time, sensor, message) VALUES (?, ?, ?); \"\"\" with db , closing ( db . cursor ()) as cur : cur . execute ( insert , ( message . time , sensor . name , message . data )) def read_obs ( db : sqlite3 . Connection , sensor : Sensor ) -> Generator [ ObsData , None , None ]: \"\"\"read messages from DB and return decoded observations\"\"\" select = \"\"\" SELECT message, time FROM messages WHERE sensor IS ? ORDER BY time; \"\"\" decode = lambda row : sensor . decode ( row [ 0 ], time = row [ 1 ]) with closing ( db . cursor ()) as cur : cur . execute ( select , ( sensor . name ,)) return ( decode ( row ) for row in cur . fetchall ()) if __name__ == \"__main__\" : from typer import run try : run ( main ) except KeyboardInterrupt : print ( \"\" ) sensor measurements #!/usr/bin/env python3 \"\"\" Read measurements from 2 different sensors and store them on a sqlite DB as a \"tall table\" with a \"wide table\" view for each sensor. After reading the sensor, get all measurements from the DB amd print them by sensor. - PMSx003 senor on /dev/ttyUSB0 - MCU680 sensor on /dev/ttyUSB1 - read 4 samples for each sensor, by default - read one sample from each sensor every 20 seconds, by default NOTE: the read_obs function creates a subclass of sensor.Data in order to avoid the callin to __post_init__, as this was already tone when the sensor message was decoded. Please open an issue or submit a PR i you know of a cleaner way to achieve this. \"\"\" import sqlite3 from contextlib import closing , contextmanager from dataclasses import asdict , dataclass , fields from pathlib import Path from typing import Callable , ContextManager , Generator from typer import Argument , Option , progressbar from pms.core import Sensor , SensorReader from pms.core.reader import ObsData def main ( db_path : Path = Argument ( Path ( \"pypms.sqlite\" ), help = \"sensor measurements DB\" ), samples : int = Option ( 4 , \"--samples\" , \"-n\" ), interval : int = Option ( 20 , \"--interval\" , \"-i\" ), ): \"\"\" Read measurements from 2 different sensors (PMSx003 on /dev/ttyUSB0 and MCU680 on /dev/ttyUSB1) and store them on a sqlite DB as a \"tall table\" with a \"wide table\" view for each sensor. After reading the sensors, get all measurements from the DB amd print them by sensor. \"\"\" # get DB context manager measurements_db = pypms_db ( db_path ) reader = dict ( pms = SensorReader ( \"PMSx003\" , \"/dev/ttyUSB0\" , interval , samples ), bme = SensorReader ( \"MCU680\" , \"/dev/ttyUSB1\" , interval , samples ), ) # read from each sensor and write to DB with measurements_db () as db , reader [ \"pms\" ] as pms , reader [ \"bme\" ] as bme : # read one obs from each sensor at the time with progressbar ( zip ( pms (), bme ()), length = samples , label = \"reading sensors\" ) as progress : for pms_obs , env_obs in progress : write_measurements ( db , pms . sensor , pms_obs ) write_measurements ( db , bme . sensor , env_obs ) # read all measurements on the DB and reconstruct sensor.Data objects with measurements_db () as db : # extract obs from one sensor at the time for sensor in [ r . sensor for r in reader . values ()]: print ( sensor ) for obs in read_obs ( db , sensor ): print ( obs ) def pypms_db ( db_path : Path ) -> Callable [[], ContextManager [ sqlite3 . Connection ]]: \"\"\" create db and table and update sensor views, if do not exists already and return a context managet for a DB connection \"\"\" @contextmanager def connect () -> Generator [ sqlite3 . Connection , None , None ]: db = sqlite3 . connect ( str ( db_path )) try : yield db except sqlite3 . Error as e : exit ( e ) finally : db . close () create_table = \"\"\" CREATE TABLE IF NOT EXISTS measurements ( time DATETIME NOT NULL, sensor TEXT NOT NULL, field TEXT NOT NULL, value NUMERIC NOT NULL, UNIQUE (time, sensor, field) ); \"\"\" with connect () as db , db , closing ( db . cursor ()) as cur : cur . executescript ( create_table ) # create a \"wide table\" view for every suppoorted sensor for sensor in Sensor : view_fields = \", \\n \" . join ( f \"MAX(CASE WHEN field=' { field . name } ' THEN value ELSE NULL END) { field . name } \" for field in fields ( sensor . Data ) if field . name != \"time\" ) sensor_view = f \"\"\" CREATE VIEW IF NOT EXISTS { sensor . name } AS SELECT MAX(time) time, { view_fields } FROM measurements WHERE sensor IS ' { sensor . name } ' GROUP BY time ORDER BY time; \"\"\" cur . executescript ( sensor_view ) return connect def write_measurements ( db : sqlite3 . Connection , sensor : Sensor , obs : ObsData ): \"\"\"insert raw messages into the DB\"\"\" insert = \"\"\" INSERT OR IGNORE INTO measurements (time, sensor, field, value) VALUES (?, ?, ?, ?); \"\"\" values = ( ( obs . time , sensor . name , field , value ) for field , value in asdict ( obs ) . items () if field != \"time\" ) with db , closing ( db . cursor ()) as cur : cur . executemany ( insert , values ) def read_obs ( db : sqlite3 . Connection , sensor : Sensor ) -> Generator [ ObsData , None , None ]: \"\"\"read measurements from DB and return observations\"\"\" @dataclass class NewObs ( sensor . Data ): # type: ignore[name-defined] def __post_init__ ( self ): \"\"\"avoid call to post-init, this was already done when the message was decoded\"\"\" pass with closing ( db . cursor ()) as cur : cur . execute ( f \"SELECT * FROM { sensor . name } ;\" ) return ( NewObs ( * row ) for row in cur . fetchall ()) if __name__ == \"__main__\" : from typer import run try : run ( main ) except KeyboardInterrupt : print ( \"\" )","title":"SQLite examples"},{"location":"sensors/Honeywell/","text":"Honeywell sensors Warning This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM1 PM2.5 PM4 PM10 HPMA115S0 HPMA115S0 HPMA115C0 HPMA115C0 datasheet Sensor Datasheet Dimensions Connector HPMA115S0 en 43x36x24 mm\u00b3 8 pin HPMA115C0 en 44X36X12 mm\u00b3 10 pin Connector 8 pin 8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1 VOUT 3.3V power output: max 100 mA 2 VCC 5V\u00b10.2V power input: max 600 mA, ripple < 20 mV 3/4 NC not connected 5 RES reserved for future use 6 TX 3.3V TTL serial port 7 RX 3.3V TTL serial port 8 GND 0V 10 pin 5x2 1.27mm female header: Samtec SFSD-05-28-H-5.00-SR (cable assembly) or SFM-105-02-H-D (surface mount). Pin Name Voltage Function 1 VOUT 5V power output: max 300 mA 2 VCC 5V\u00b10.2V power input: max 600 mA, ripple < 20 mV 3/4 GND 0V 5 RES reserved for future use 6 NC not connected 7 RX 3.3V TTL serial port 8 NC not connected 9 TX 3.3V TTL serial port 10 SET reserved for future use Protocol Serial protocol is UART 9600 8N1 3.3V TTL. commands All the Honeywell PM sensors can be fully controlled with serial commands: Command Description message active_mode continuous operation 68 01 40 57 passive_mode single-shot operation 68 01 20 77 passive_read trigger single-shot measurement 68 01 04 93 sleep sleep mode 68 01 02 95 wake wake up from sleep mode 68 01 01 96 message Messages containing measurements consist of unsigned short integers. The last bit of the message should contain sum(message[3:-1])%0x100 . message HPMA115S0 HPMA115C0 8 bits (32b on active mode) 16 bits (32b on active mode) header 3 bits 3 bits 40 05 04 40 05 04 body 4 bits 12 bits 2 values 4 values, 2 reserved checksum 1 bit 1 bit HPMA115S0 The message body ( message[3:7] ) contains 2 values: pm25, pm10: PM2.5, PM10 [\u03bcg/m\u00b3] HPMA115C0 The message body ( message[3:7] ) contains 4 values: pm01, pm25, pm04, pm10: PM1.0, PM2.5, PM4.0 PM10 [\u03bcg/m\u00b3] HPMA115S0 info About the HPMA115S0 sensor ( -m HPMA115S0 ) pms -m HPMA115S0 info Honeywell HPMA115S0 sensor observations time measurement time [seconds since epoch] pm25, pm10 PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m HPMA115S0 -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m HPMA115S0 -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m HPMA115S0 -n 10 -i 10 serial -f hexdump HPMA115C0 info About the HPMA115S0 sensor ( -m HPMA115C0 ) pms -m HPMA115C0 info Honeywell HPMA115C0 sensor observations time measurement time [seconds since epoch] pm01, pm25, pm04, pm10 PM1.0, PM2.5, PM4.0 PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m HPMA115C0 -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m HPMA115C0 -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m HPMA115C0 -n 10 -i 10 serial -f hexdump","title":"Honeywell"},{"location":"sensors/Honeywell/#honeywell-sensors","text":"Warning This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM1 PM2.5 PM4 PM10 HPMA115S0 HPMA115S0 HPMA115C0 HPMA115C0 datasheet Sensor Datasheet Dimensions Connector HPMA115S0 en 43x36x24 mm\u00b3 8 pin HPMA115C0 en 44X36X12 mm\u00b3 10 pin","title":"Honeywell sensors"},{"location":"sensors/Honeywell/#connector","text":"8 pin 8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1 VOUT 3.3V power output: max 100 mA 2 VCC 5V\u00b10.2V power input: max 600 mA, ripple < 20 mV 3/4 NC not connected 5 RES reserved for future use 6 TX 3.3V TTL serial port 7 RX 3.3V TTL serial port 8 GND 0V 10 pin 5x2 1.27mm female header: Samtec SFSD-05-28-H-5.00-SR (cable assembly) or SFM-105-02-H-D (surface mount). Pin Name Voltage Function 1 VOUT 5V power output: max 300 mA 2 VCC 5V\u00b10.2V power input: max 600 mA, ripple < 20 mV 3/4 GND 0V 5 RES reserved for future use 6 NC not connected 7 RX 3.3V TTL serial port 8 NC not connected 9 TX 3.3V TTL serial port 10 SET reserved for future use","title":"Connector"},{"location":"sensors/Honeywell/#protocol","text":"Serial protocol is UART 9600 8N1 3.3V TTL. commands All the Honeywell PM sensors can be fully controlled with serial commands: Command Description message active_mode continuous operation 68 01 40 57 passive_mode single-shot operation 68 01 20 77 passive_read trigger single-shot measurement 68 01 04 93 sleep sleep mode 68 01 02 95 wake wake up from sleep mode 68 01 01 96 message Messages containing measurements consist of unsigned short integers. The last bit of the message should contain sum(message[3:-1])%0x100 . message HPMA115S0 HPMA115C0 8 bits (32b on active mode) 16 bits (32b on active mode) header 3 bits 3 bits 40 05 04 40 05 04 body 4 bits 12 bits 2 values 4 values, 2 reserved checksum 1 bit 1 bit HPMA115S0 The message body ( message[3:7] ) contains 2 values: pm25, pm10: PM2.5, PM10 [\u03bcg/m\u00b3] HPMA115C0 The message body ( message[3:7] ) contains 4 values: pm01, pm25, pm04, pm10: PM1.0, PM2.5, PM4.0 PM10 [\u03bcg/m\u00b3]","title":"Protocol"},{"location":"sensors/Honeywell/#hpma115s0","text":"info About the HPMA115S0 sensor ( -m HPMA115S0 ) pms -m HPMA115S0 info Honeywell HPMA115S0 sensor observations time measurement time [seconds since epoch] pm25, pm10 PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m HPMA115S0 -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m HPMA115S0 -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m HPMA115S0 -n 10 -i 10 serial -f hexdump","title":"HPMA115S0"},{"location":"sensors/Honeywell/#hpma115c0","text":"info About the HPMA115S0 sensor ( -m HPMA115C0 ) pms -m HPMA115C0 info Honeywell HPMA115C0 sensor observations time measurement time [seconds since epoch] pm01, pm25, pm04, pm10 PM1.0, PM2.5, PM4.0 PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m HPMA115C0 -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m HPMA115C0 -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m HPMA115C0 -n 10 -i 10 serial -f hexdump","title":"HPMA115C0"},{"location":"sensors/NovaFitness/","text":"NovaFitness sensors Warning This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM2.5 PM10 PM100 SDS011 SDS01x SDS018 SDS01x SDS021 SDS01x SDS198 SDS198 datasheet Sensor Datasheet Dimensions Connector SDS011 en 70x70x25 mm\u00b3 7 Pin SDS018 en 60x46x20 mm\u00b3 7 Pin SDS021 en 43x32x24 mm\u00b3 5 Pin SDS198 en 70x70x25 mm\u00b3 7 Pin Connector 5 pin 5 pin ????, comes with sensor Pin Name Voltage Function 1 5V 4.7-5.3V >1W, ripple < 20 mV 2 NC not connected 3 GND 0V 4 R 3.3V TTL RX serial port 5 T 3.3V TTL TX serial port 7 pin 7 pin JST XH (2.5mm pitch), comes with sensor Pin Name Voltage Function 1 NC not connected 2 1\u03bcm 3.3V PWM PM2.5 0-999 \u03bcg/m\u00b3; reserved on SDS198 3 5V 4.7-5.3V >1W, ripple < 20 mV 4 2.5\u03bcm 3.3V PWM PM10 0-999 \u03bcg/m\u00b3; reserved on SDS198 5 GND 0V 6 R 3.3V TTL RX serial port 7 T 3.3V TTL TX serial port Protocol Serial protocol is UART 9600 8N1 3.3V TTL. commands All the NovaFitness PM sensors can be fully controlled with serial commands: Command Description message active_mode continuous operation aa b4 02 01 00 00 00 00 00 00 00 00 00 00 00 ff ff 01 ab passive_mode single-shot operation aa b4 02 01 01 00 00 00 00 00 00 00 00 00 00 ff ff 02 ab passive_read trigger single-shot measurement aa b4 04 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 02 ab sleep sleep mode aa b4 06 01 00 00 00 00 00 00 00 00 00 00 00 ff ff 05 ab wake wake up from sleep mode aa b4 06 01 01 00 00 00 00 00 00 00 00 00 00 ff ff 06 ab message Messages containing measurements consist of unsigned short integers. The second to last bit of the message should contain sum(message[2:-2])%0x100 . message SDS01x SDS198 10 bits 10 bits header 2 bits 2 bits aa c0 aa cf body 6 bits 6 bits 2 values, 1 ID 1 reserved, 1 value, 1 ID checksum 1 bit 1 bit tail 1 bit 1 bit ab ab SDS01x The message body ( message[2:6] ) contains 2 values: pm25, pm10: PM2.5, PM10 [\u03bcg/m\u00b3] (raw values [0.1 \u03bcg/m\u00b3]) SDS198 The message body ( message[4:6] ) contains 1 value: pm100: PM100 [\u03bcg/m\u00b3] SDS01x info About the sensors supported by the SDS01x protocol ( -m SDS01x ) pms -m SDS01x info NovaFitness SDS011, SDS018 and SDS021 sensor observations time measurement time [seconds since epoch] pm25, pm10 PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m SDS01x -n 10 -i 10 serial 2020-09-27 20:11:20: PM2.5 0.6, PM10 0.6 \u03bcg/m3 2020-09-27 20:11:30: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:11:40: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:11:50: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:00: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:10: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:20: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:30: PM2.5 0.8, PM10 0.8 \u03bcg/m3 2020-09-27 20:12:40: PM2.5 0.8, PM10 0.8 \u03bcg/m3 2020-09-27 20:12:50: PM2.5 0.8, PM10 0.8 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m SDS01x -n 10 -i 10 serial -f csv time, pm25, pm10 1601230280, 0.6, 0.6 1601230290, 0.9, 0.9 1601230300, 0.9, 0.9 1601230310, 0.9, 0.9 1601230320, 0.9, 0.9 1601230330, 0.9, 0.9 1601230340, 0.9, 0.9 1601230350, 0.8, 0.8 1601230360, 0.8, 0.8 1601230370, 0.8, 0.8 hexdump Print on hexdump format ( -f hexdump ) pms -m SDS01x -n 10 -i 10 serial -f hexdump 00000000 : aa c0 06 00 06 00 58 d9 3d ab ......X.=. 0000000a : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000014 : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 0000001e : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000028 : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000032 : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 0000003c : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000046 : aa c0 08 00 08 00 58 d9 41 ab ......X.A. 00000050 : aa c0 08 00 08 00 58 d9 41 ab ......X.A. 0000005a : aa c0 08 00 08 00 58 d9 41 ab ......X.A. SDS198 info About the SDS198 sensor ( -m SDS198 ) pms -m SDS198 info NovaFitness SDS198 sensor observations time measurement time [seconds since epoch] pm100 PM100 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 6 samples ( -n 6 ), one sample every 10 seconds (-i 10 ) pms -m SDS198 -n 6 -i 10 serial 2020-09-09 14:58:30: PM100 16.0 \u03bcg/m3 2020-09-09 14:58:40: PM100 19.0 \u03bcg/m3 2020-09-09 14:58:50: PM100 22.0 \u03bcg/m3 2020-09-09 14:59:00: PM100 26.0 \u03bcg/m3 2020-09-09 14:59:10: PM100 20.0 \u03bcg/m3 2020-09-09 14:59:20: PM100 1.0 \u03bcg/m3 csv Print on CSV format (-f csv) pms -m SDS198 -n 6 -i 10 serial -f csv time, pm100 1599656310, 16.0 1599656320, 19.0 1599656330, 22.0 1599656340, 26.0 1599656350, 20.0 1599656360, 1.0 hexdump Print on hexdump format ( -f hexdump ) pms -m SDS198 -n 6 -i 10 serial -f hexdump 00000000 : aa cf 0e 00 10 00 e9 05 0c ab .......... 0000000a : aa cf 0e 00 13 00 e9 05 0f ab .......... 00000014 : aa cf 0c 00 16 00 e9 05 10 ab .......... 0000001e : aa cf 0c 00 1a 00 e9 05 14 ab .......... 00000028 : aa cf 0b 00 14 00 e9 05 0d ab .......... 00000032 : aa cf 06 01 01 00 e9 05 f6 ab ..........","title":"NovaFitness"},{"location":"sensors/NovaFitness/#novafitness-sensors","text":"Warning This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM2.5 PM10 PM100 SDS011 SDS01x SDS018 SDS01x SDS021 SDS01x SDS198 SDS198 datasheet Sensor Datasheet Dimensions Connector SDS011 en 70x70x25 mm\u00b3 7 Pin SDS018 en 60x46x20 mm\u00b3 7 Pin SDS021 en 43x32x24 mm\u00b3 5 Pin SDS198 en 70x70x25 mm\u00b3 7 Pin","title":"NovaFitness sensors"},{"location":"sensors/NovaFitness/#connector","text":"5 pin 5 pin ????, comes with sensor Pin Name Voltage Function 1 5V 4.7-5.3V >1W, ripple < 20 mV 2 NC not connected 3 GND 0V 4 R 3.3V TTL RX serial port 5 T 3.3V TTL TX serial port 7 pin 7 pin JST XH (2.5mm pitch), comes with sensor Pin Name Voltage Function 1 NC not connected 2 1\u03bcm 3.3V PWM PM2.5 0-999 \u03bcg/m\u00b3; reserved on SDS198 3 5V 4.7-5.3V >1W, ripple < 20 mV 4 2.5\u03bcm 3.3V PWM PM10 0-999 \u03bcg/m\u00b3; reserved on SDS198 5 GND 0V 6 R 3.3V TTL RX serial port 7 T 3.3V TTL TX serial port","title":"Connector"},{"location":"sensors/NovaFitness/#protocol","text":"Serial protocol is UART 9600 8N1 3.3V TTL. commands All the NovaFitness PM sensors can be fully controlled with serial commands: Command Description message active_mode continuous operation aa b4 02 01 00 00 00 00 00 00 00 00 00 00 00 ff ff 01 ab passive_mode single-shot operation aa b4 02 01 01 00 00 00 00 00 00 00 00 00 00 ff ff 02 ab passive_read trigger single-shot measurement aa b4 04 00 00 00 00 00 00 00 00 00 00 00 00 ff ff 02 ab sleep sleep mode aa b4 06 01 00 00 00 00 00 00 00 00 00 00 00 ff ff 05 ab wake wake up from sleep mode aa b4 06 01 01 00 00 00 00 00 00 00 00 00 00 ff ff 06 ab message Messages containing measurements consist of unsigned short integers. The second to last bit of the message should contain sum(message[2:-2])%0x100 . message SDS01x SDS198 10 bits 10 bits header 2 bits 2 bits aa c0 aa cf body 6 bits 6 bits 2 values, 1 ID 1 reserved, 1 value, 1 ID checksum 1 bit 1 bit tail 1 bit 1 bit ab ab SDS01x The message body ( message[2:6] ) contains 2 values: pm25, pm10: PM2.5, PM10 [\u03bcg/m\u00b3] (raw values [0.1 \u03bcg/m\u00b3]) SDS198 The message body ( message[4:6] ) contains 1 value: pm100: PM100 [\u03bcg/m\u00b3]","title":"Protocol"},{"location":"sensors/NovaFitness/#sds01x","text":"info About the sensors supported by the SDS01x protocol ( -m SDS01x ) pms -m SDS01x info NovaFitness SDS011, SDS018 and SDS021 sensor observations time measurement time [seconds since epoch] pm25, pm10 PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m SDS01x -n 10 -i 10 serial 2020-09-27 20:11:20: PM2.5 0.6, PM10 0.6 \u03bcg/m3 2020-09-27 20:11:30: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:11:40: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:11:50: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:00: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:10: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:20: PM2.5 0.9, PM10 0.9 \u03bcg/m3 2020-09-27 20:12:30: PM2.5 0.8, PM10 0.8 \u03bcg/m3 2020-09-27 20:12:40: PM2.5 0.8, PM10 0.8 \u03bcg/m3 2020-09-27 20:12:50: PM2.5 0.8, PM10 0.8 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m SDS01x -n 10 -i 10 serial -f csv time, pm25, pm10 1601230280, 0.6, 0.6 1601230290, 0.9, 0.9 1601230300, 0.9, 0.9 1601230310, 0.9, 0.9 1601230320, 0.9, 0.9 1601230330, 0.9, 0.9 1601230340, 0.9, 0.9 1601230350, 0.8, 0.8 1601230360, 0.8, 0.8 1601230370, 0.8, 0.8 hexdump Print on hexdump format ( -f hexdump ) pms -m SDS01x -n 10 -i 10 serial -f hexdump 00000000 : aa c0 06 00 06 00 58 d9 3d ab ......X.=. 0000000a : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000014 : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 0000001e : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000028 : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000032 : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 0000003c : aa c0 09 00 09 00 58 d9 43 ab ......X.C. 00000046 : aa c0 08 00 08 00 58 d9 41 ab ......X.A. 00000050 : aa c0 08 00 08 00 58 d9 41 ab ......X.A. 0000005a : aa c0 08 00 08 00 58 d9 41 ab ......X.A.","title":"SDS01x"},{"location":"sensors/NovaFitness/#sds198","text":"info About the SDS198 sensor ( -m SDS198 ) pms -m SDS198 info NovaFitness SDS198 sensor observations time measurement time [seconds since epoch] pm100 PM100 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 6 samples ( -n 6 ), one sample every 10 seconds (-i 10 ) pms -m SDS198 -n 6 -i 10 serial 2020-09-09 14:58:30: PM100 16.0 \u03bcg/m3 2020-09-09 14:58:40: PM100 19.0 \u03bcg/m3 2020-09-09 14:58:50: PM100 22.0 \u03bcg/m3 2020-09-09 14:59:00: PM100 26.0 \u03bcg/m3 2020-09-09 14:59:10: PM100 20.0 \u03bcg/m3 2020-09-09 14:59:20: PM100 1.0 \u03bcg/m3 csv Print on CSV format (-f csv) pms -m SDS198 -n 6 -i 10 serial -f csv time, pm100 1599656310, 16.0 1599656320, 19.0 1599656330, 22.0 1599656340, 26.0 1599656350, 20.0 1599656360, 1.0 hexdump Print on hexdump format ( -f hexdump ) pms -m SDS198 -n 6 -i 10 serial -f hexdump 00000000 : aa cf 0e 00 10 00 e9 05 0c ab .......... 0000000a : aa cf 0e 00 13 00 e9 05 0f ab .......... 00000014 : aa cf 0c 00 16 00 e9 05 10 ab .......... 0000001e : aa cf 0c 00 1a 00 e9 05 14 ab .......... 00000028 : aa cf 0b 00 14 00 e9 05 0d ab .......... 00000032 : aa cf 06 01 01 00 e9 05 f6 ab ..........","title":"SDS198"},{"location":"sensors/Plantower/","text":"Plantower sensors Warning This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM1 PM2.5 PM10 size bins Other PMS1003 PMSx003 6 PMS3003 PMS3003 No passive mode read PMS5003 PMSx003 6 PMS5003T PMS5003T 4 temp. & rel.hum. PMS5003S PMS5003S 6 HCHO concentration PMS5003ST PMS5003ST 6 HCHO, temp. & rel.hum. PMS7003 PMSx003 6 PMSA003 PMSx003 6 datasheet Sensor Datasheet Dimensions Connector PMS1003 en , cn 42x65x23 mm\u00b3 8 pin PMS3003 en , cn 43x50x21 mm\u00b3 8 pin PMS5003 en , cn 38x50x21 mm\u00b3 8 pin PMS5003T 38x50x21 mm\u00b3 8 pin PMS5003S 38x50x21 mm\u00b3 8 pin PMS5003ST 38x50x21 mm\u00b3 8 pin PMS7003 cn 37x48x12 mm\u00b3 10 pin PMSA003 cn 10 pin Connector 8 pin 8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1 VCC 5V 2 GND 0V 3 SET 3.3V TTL wake (hight)/sleep (low) mode 4 RX 3.3V TTL serial port 5 TX 3.3V TTL serial port 6 RESET 3,3V TTL reset (low) 7/8 NC not connected 10 pin 5x2 1.27mm female header Pin Name Voltage Function 1/2 VCC 5V 3/4 GND 0V 5 RESET 3,3V TTL reset (low) 6 NC not connected 7 RX 3.3V TTL serial port 8 NC not connected 9 TX 3.3V TTL serial port 10 SET 3.3V TTL wake (hight)/sleep (low) mode Protocol Serial protocol is UART 9600 8N1 3.3V TTL. commands With the exception of the PMS3003 , all the Plantower PM sensors can be fully controlled with serial commands: Command Description message active_mode continuous operation 42 4D E1 00 01 01 71 passive_mode single-shot operation 42 4D E1 00 00 01 70 passive_read trigger single-shot measurement 42 4D E2 00 00 01 71 sleep sleep mode 42 4D E4 00 00 01 73 wake wake up from sleep mode 42 4D E4 00 01 01 74 message Messages containing measurements consist of unsigned short integers. The last 2 bits of the message should contain sum(message[:2]) . message PMS3003 PMSx003 PMS5003T PMS5003S PMS5003ST 24 bits 32 bits 32 bits 32 bits 40 bits header 4 bits 4 bits 4 bits 4 bits 4 bits 42 4d 00 14 42 4d 00 1c 42 4d 00 1c 42 4d 00 1c 42 4d 00 24 body 18 bits 26 bits 26 bits 26 bits 34 bits 6 values, 3 reserved 12 values, 1 reserved 13 values 13 values 15 values, 2 reserved checksum 2 bits 2 bits 2 bits 2 bits 2 bits PMS3003 The message body ( message[4:16] ) contains 6 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] PMSx003 The message body ( message[4:28] ) contains 12 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y \u03bcm [#/cm\u00b3] (raw values [#/100 cm\u00b3]) PMS5003T The message body ( message[4:28] ) contains 12 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3]) temp: temperature [\u00b0C] rhum: relative humidity [%] PMS5003S The message body ( message[4:30] ) contains 13 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3]) HCHO: concentration of formaldehyde [\u03bcg/m\u00b3] PMS5003ST The message body ( message[4:34] ) contains 15 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3]) HCHO: concentration of formaldehyde [\u03bcg/m\u00b3] temp: temperature [\u00b0C] rhum: relative humidity [%] PMS3003 Note This sensors does not support passive mode sampling info About the PMS3003 sensor ( -m PMS3003 ) pms -m PMS3003 info Plantower PMS3003 sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), raw, cf, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS3003 -n 10 -i 10 serial 2020-09-27 17:16:10: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:20: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:30: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:40: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:50: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3 2020-09-27 17:17:00: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3 2020-09-27 17:17:10: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3 2020-09-27 17:17:20: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:17:30: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:17:40: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m PMS3003 -n 10 -i 10 serial -f csv time, raw01, raw25, raw10, pm01, pm25, pm10 1601219770, 0, 0, 0, 0.0, 0.0, 0.0 1601219780, 0, 0, 0, 0.0, 0.0, 0.0 1601219790, 0, 0, 0, 0.0, 0.0, 0.0 1601219800, 0, 0, 0, 0.0, 0.0, 0.0 1601219810, 1, 1, 1, 1.0, 1.0, 1.0 1601219820, 1, 1, 1, 1.0, 1.0, 1.0 1601219830, 1, 1, 1, 1.0, 1.0, 1.0 1601219840, 0, 0, 0, 0.0, 0.0, 0.0 1601219850, 0, 0, 0, 0.0, 0.0, 0.0 1601219860, 0, 0, 0, 0.0, 0.0, 0.0 hexdump Print on hexdump format ( -f hexdump ) pms -m PMS3003 -n 10 -i 10 serial -f hexdump 00000000 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000018 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000030 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000048 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000060 : 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa BM...................Q.. 00000078 : 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa BM...................Q.. 00000090 : 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa BM...................Q.. 000000a8 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 000000c0 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 000000d8 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. PMSx003 info About the sensors supported by the PMSx003 protocol ( -m PMSx003 ) pms -m PMSx003 info Plantower PMS1003, PMS5003, PMS7003 and PMSA003 sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 number concentrations over X.Y um [#/cm3] String formats: pm (default), raw, cf, num, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMSx003 -n 10 -i 10 serial 2020-09-27 17:16:10: PM1 0.0, PM2.5 8.0, PM10 8.0 \u03bcg/m3 2020-09-27 17:16:20: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:16:30: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:16:40: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:16:50: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:17:00: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:10: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:20: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:30: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:40: PM1 0.0, PM2.5 5.0, PM10 5.0 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m PMSx003 -n 10 -i 10 serial -f csv time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 1601219770, 0, 8, 8, 0.0, 8.0, 8.0, 2.10, 0.70, 0.45, 0.30, 0.00, 0.00 1601219780, 0, 7, 7, 0.0, 7.0, 7.0, 2.10, 0.70, 0.45, 0.30, 0.00, 0.00 1601219790, 0, 7, 7, 0.0, 7.0, 7.0, 1.89, 0.63, 0.42, 0.27, 0.00, 0.00 1601219800, 0, 7, 7, 0.0, 7.0, 7.0, 1.80, 0.60, 0.39, 0.24, 0.00, 0.00 1601219810, 0, 7, 7, 0.0, 7.0, 7.0, 1.80, 0.60, 0.39, 0.24, 0.00, 0.00 1601219820, 0, 6, 6, 0.0, 6.0, 6.0, 1.80, 0.60, 0.29, 0.21, 0.00, 0.00 1601219830, 0, 6, 6, 0.0, 6.0, 6.0, 1.80, 0.60, 0.29, 0.21, 0.00, 0.00 1601219840, 0, 6, 6, 0.0, 6.0, 6.0, 1.59, 0.53, 0.26, 0.18, 0.00, 0.00 1601219850, 0, 6, 6, 0.0, 6.0, 6.0, 1.59, 0.53, 0.26, 0.18, 0.00, 0.00 1601219860, 0, 5, 5, 0.0, 5.0, 5.0, 1.38, 0.46, 0.23, 0.15, 0.00, 0.00 hexdump Print on hexdump format ( -f hexdump ) pms -m PMSx003 -n 10 -i 10 serial -f hexdump 00000000 : 42 4d 00 1c 00 00 00 08 00 08 00 00 00 08 00 08 00 d2 00 46 00 2d 00 1e 00 00 00 00 97 00 02 c5 BM.................F.-.......... 00000020 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 d2 00 46 00 2d 00 1e 00 00 00 00 97 00 02 c1 BM.................F.-.......... 00000040 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 bd 00 3f 00 2a 00 1b 00 00 00 00 97 00 02 9f BM.................?.*.......... 00000060 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 b4 00 3c 00 27 00 18 00 00 00 00 97 00 02 8d BM.................<.'.......... 00000080 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 b4 00 3c 00 27 00 18 00 00 00 00 97 00 02 8d BM.................<.'.......... 000000a0 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 b4 00 3c 00 1d 00 15 00 00 00 00 97 00 02 7c BM.................<...........| 000000c0 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 b4 00 3c 00 1d 00 15 00 00 00 00 97 00 02 7c BM.................<...........| 000000e0 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 9f 00 35 00 1a 00 12 00 00 00 00 97 00 02 5a BM.................5...........Z 00000100 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 9f 00 35 00 1a 00 12 00 00 00 00 97 00 02 5a BM.................5...........Z 00000120 : 42 4d 00 1c 00 00 00 05 00 05 00 00 00 05 00 05 00 8a 00 2e 00 17 00 0f 00 00 00 00 97 00 02 34 BM.............................4 PMS5003T info About the PMS5003T sensor ( -m PMS5003T ) pms -m PMS5003T info Plantower PMS5003T sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5 number concentrations over X.Y um [#/cm3] temp temperature [\u00b0C] rhum relative humidity [%] String formats: pm (default), raw, cf, num, atm, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS5003T -n 10 -i 10 serial 2021-02-02 07:27:57: PM1 22.0, PM2.5 35.0, PM10 41.0 \u03bcg/m3 2021-02-02 07:28:07: PM1 20.0, PM2.5 33.0, PM10 36.0 \u03bcg/m3 2021-02-02 07:28:17: PM1 20.0, PM2.5 34.0, PM10 38.0 \u03bcg/m3 2021-02-02 07:28:27: PM1 19.0, PM2.5 32.0, PM10 42.0 \u03bcg/m3 2021-02-02 07:28:37: PM1 22.0, PM2.5 35.0, PM10 38.0 \u03bcg/m3 2021-02-02 07:28:47: PM1 21.0, PM2.5 34.0, PM10 39.0 \u03bcg/m3 2021-02-02 07:28:57: PM1 21.0, PM2.5 33.0, PM10 42.0 \u03bcg/m3 2021-02-02 07:29:07: PM1 22.0, PM2.5 34.0, PM10 45.0 \u03bcg/m3 2021-02-02 07:29:17: PM1 20.0, PM2.5 32.0, PM10 44.0 \u03bcg/m3 2021-02-02 07:29:27: PM1 19.0, PM2.5 32.0, PM10 43.0 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m PMS5003T -n 10 -i 10 serial -f csv time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, temp, rhum 1612247277, 23, 39, 41, 22.0, 35.0, 41.0, 41.04, 11.93, 2.78, 0.12, 21.2, 22.4 1612247287, 21, 36, 36, 20.0, 33.0, 36.0, 35.28, 10.55, 2.28, 0.14, 21.2, 22.4 1612247297, 21, 37, 38, 20.0, 34.0, 38.0, 38.40, 11.26, 2.50, 0.22, 21.2, 22.4 1612247307, 20, 35, 42, 19.0, 32.0, 42.0, 37.50, 10.79, 2.62, 0.30, 21.2, 22.3 1612247317, 23, 38, 38, 22.0, 35.0, 38.0, 38.16, 11.22, 2.86, 0.14, 21.2, 22.4 1612247327, 22, 37, 39, 21.0, 34.0, 39.0, 38.37, 11.14, 2.88, 0.20, 21.2, 22.3 1612247337, 22, 36, 42, 21.0, 33.0, 42.0, 37.59, 11.10, 2.82, 0.22, 21.2, 22.3 1612247347, 23, 37, 45, 22.0, 34.0, 45.0, 38.37, 11.35, 2.92, 0.22, 21.3, 22.2 1612247357, 21, 35, 44, 20.0, 32.0, 44.0, 37.86, 11.14, 2.86, 0.24, 21.3, 22.2 1612247367, 20, 34, 43, 19.0, 32.0, 43.0, 36.03, 10.44, 2.72, 0.30, 21.3, 22.3 hexdump Print on hexdump format ( -f hexdump ) pms -m PMS5003T -n 10 -i 10 serial -f hexdump 00000000 : 42 4d 00 1c 00 17 00 27 00 29 00 16 00 23 00 29 10 08 04 a9 01 16 00 0c 00 d4 00 e0 9a 00 04 aa BM.....'.)...#.)................ 00000020 : 42 4d 00 1c 00 15 00 24 00 24 00 14 00 21 00 24 0d c8 04 1f 00 e4 00 0e 00 d4 00 e0 9a 00 05 99 BM.....$.$...!.$................ 00000040 : 42 4d 00 1c 00 15 00 25 00 26 00 14 00 22 00 26 0f 00 04 66 00 fa 00 16 00 d4 00 e0 9a 00 05 3e BM.....%.&...\".&...f...........> 00000060 : 42 4d 00 1c 00 14 00 23 00 2a 00 13 00 20 00 2a 0e a6 04 37 01 06 00 1e 00 d4 00 df 9a 00 04 ca BM.....#.*... .*...7............ 00000080 : 42 4d 00 1c 00 17 00 26 00 26 00 16 00 23 00 26 0e e8 04 62 01 1e 00 0e 00 d4 00 e0 9a 00 05 44 BM.....&.&...#.&...b...........D 000000a0 : 42 4d 00 1c 00 16 00 25 00 27 00 15 00 22 00 27 0e fd 04 5a 01 20 00 14 00 d4 00 df 9a 00 05 56 BM.....%.'...\".'...Z. .........V 000000c0 : 42 4d 00 1c 00 16 00 24 00 2a 00 15 00 21 00 2a 0e af 04 56 01 1a 00 16 00 d4 00 df 9a 00 05 04 BM.....$.*...!.*...V............ 000000e0 : 42 4d 00 1c 00 17 00 25 00 2d 00 16 00 22 00 2d 0e fd 04 6f 01 24 00 16 00 d5 00 de 9a 00 05 7f BM.....%.-...\".-...o.$.......... 00000100 : 42 4d 00 1c 00 15 00 23 00 2c 00 14 00 20 00 2c 0e ca 04 5a 01 1e 00 18 00 d5 00 de 9a 00 05 29 BM.....#.,... .,...Z...........) 00000120 : 42 4d 00 1c 00 14 00 22 00 2b 00 13 00 20 00 2b 0e 13 04 14 01 10 00 1e 00 d5 00 df 9a 00 04 20 BM.....\".+... .+............... PMS5003S info About the PMS5003S sensor ( -m PMS5003S ) pms -m PMS5003S info Plantower PMS5003S sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 number concentrations over X.Y um [#/cm3] HCHO formaldehyde concentration [mg/m3] String formats: pm (default), raw, cf, num, hcho, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS5003S -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m PMS5003S -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m PMS5003S -n 10 -i 10 serial -f hexdump PMS5003ST info About the PMS5003ST sensor ( -m PMS5003ST ) pms -m PMS5003ST info Plantower PMS5003ST sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 number concentrations over X.Y um [#/cm3] HCHO formaldehyde concentration [mg/m3] temp temperature [\u00b0C] rhum relative humidity [%] String formats: pm (default), raw, cf, num, hcho, atm, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS5003ST -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m PMS5003ST -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m PMS5003ST -n 10 -i 10 serial -f hexdump","title":"Plantower"},{"location":"sensors/Plantower/#plantower-sensors","text":"Warning This sensors are 3.3V devices. They require 5V power to operate the laser and fan. However, the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM1 PM2.5 PM10 size bins Other PMS1003 PMSx003 6 PMS3003 PMS3003 No passive mode read PMS5003 PMSx003 6 PMS5003T PMS5003T 4 temp. & rel.hum. PMS5003S PMS5003S 6 HCHO concentration PMS5003ST PMS5003ST 6 HCHO, temp. & rel.hum. PMS7003 PMSx003 6 PMSA003 PMSx003 6 datasheet Sensor Datasheet Dimensions Connector PMS1003 en , cn 42x65x23 mm\u00b3 8 pin PMS3003 en , cn 43x50x21 mm\u00b3 8 pin PMS5003 en , cn 38x50x21 mm\u00b3 8 pin PMS5003T 38x50x21 mm\u00b3 8 pin PMS5003S 38x50x21 mm\u00b3 8 pin PMS5003ST 38x50x21 mm\u00b3 8 pin PMS7003 cn 37x48x12 mm\u00b3 10 pin PMSA003 cn 10 pin","title":"Plantower sensors"},{"location":"sensors/Plantower/#connector","text":"8 pin 8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1 VCC 5V 2 GND 0V 3 SET 3.3V TTL wake (hight)/sleep (low) mode 4 RX 3.3V TTL serial port 5 TX 3.3V TTL serial port 6 RESET 3,3V TTL reset (low) 7/8 NC not connected 10 pin 5x2 1.27mm female header Pin Name Voltage Function 1/2 VCC 5V 3/4 GND 0V 5 RESET 3,3V TTL reset (low) 6 NC not connected 7 RX 3.3V TTL serial port 8 NC not connected 9 TX 3.3V TTL serial port 10 SET 3.3V TTL wake (hight)/sleep (low) mode","title":"Connector"},{"location":"sensors/Plantower/#protocol","text":"Serial protocol is UART 9600 8N1 3.3V TTL. commands With the exception of the PMS3003 , all the Plantower PM sensors can be fully controlled with serial commands: Command Description message active_mode continuous operation 42 4D E1 00 01 01 71 passive_mode single-shot operation 42 4D E1 00 00 01 70 passive_read trigger single-shot measurement 42 4D E2 00 00 01 71 sleep sleep mode 42 4D E4 00 00 01 73 wake wake up from sleep mode 42 4D E4 00 01 01 74 message Messages containing measurements consist of unsigned short integers. The last 2 bits of the message should contain sum(message[:2]) . message PMS3003 PMSx003 PMS5003T PMS5003S PMS5003ST 24 bits 32 bits 32 bits 32 bits 40 bits header 4 bits 4 bits 4 bits 4 bits 4 bits 42 4d 00 14 42 4d 00 1c 42 4d 00 1c 42 4d 00 1c 42 4d 00 24 body 18 bits 26 bits 26 bits 26 bits 34 bits 6 values, 3 reserved 12 values, 1 reserved 13 values 13 values 15 values, 2 reserved checksum 2 bits 2 bits 2 bits 2 bits 2 bits PMS3003 The message body ( message[4:16] ) contains 6 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] PMSx003 The message body ( message[4:28] ) contains 12 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y \u03bcm [#/cm\u00b3] (raw values [#/100 cm\u00b3]) PMS5003T The message body ( message[4:28] ) contains 12 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3]) temp: temperature [\u00b0C] rhum: relative humidity [%] PMS5003S The message body ( message[4:30] ) contains 13 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3]) HCHO: concentration of formaldehyde [\u03bcg/m\u00b3] PMS5003ST The message body ( message[4:34] ) contains 15 values: raw01, raw25, raw10: cf=1 PM estimates [\u03bcg/m\u00b3] pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0: number of particles under X_Y um [#/cm\u00b3] (raw values [#/100 cm\u00b3]) HCHO: concentration of formaldehyde [\u03bcg/m\u00b3] temp: temperature [\u00b0C] rhum: relative humidity [%]","title":"Protocol"},{"location":"sensors/Plantower/#pms3003","text":"Note This sensors does not support passive mode sampling info About the PMS3003 sensor ( -m PMS3003 ) pms -m PMS3003 info Plantower PMS3003 sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), raw, cf, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS3003 -n 10 -i 10 serial 2020-09-27 17:16:10: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:20: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:30: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:40: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:16:50: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3 2020-09-27 17:17:00: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3 2020-09-27 17:17:10: PM1 1.0, PM2.5 1.0, PM10 1.0 \u03bcg/m3 2020-09-27 17:17:20: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:17:30: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 2020-09-27 17:17:40: PM1 0.0, PM2.5 0.0, PM10 0.0 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m PMS3003 -n 10 -i 10 serial -f csv time, raw01, raw25, raw10, pm01, pm25, pm10 1601219770, 0, 0, 0, 0.0, 0.0, 0.0 1601219780, 0, 0, 0, 0.0, 0.0, 0.0 1601219790, 0, 0, 0, 0.0, 0.0, 0.0 1601219800, 0, 0, 0, 0.0, 0.0, 0.0 1601219810, 1, 1, 1, 1.0, 1.0, 1.0 1601219820, 1, 1, 1, 1.0, 1.0, 1.0 1601219830, 1, 1, 1, 1.0, 1.0, 1.0 1601219840, 0, 0, 0, 0.0, 0.0, 0.0 1601219850, 0, 0, 0, 0.0, 0.0, 0.0 1601219860, 0, 0, 0, 0.0, 0.0, 0.0 hexdump Print on hexdump format ( -f hexdump ) pms -m PMS3003 -n 10 -i 10 serial -f hexdump 00000000 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000018 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000030 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000048 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 00000060 : 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa BM...................Q.. 00000078 : 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa BM...................Q.. 00000090 : 42 4d 00 14 00 01 00 01 00 01 00 01 00 01 00 01 00 00 00 00 00 51 00 fa BM...................Q.. 000000a8 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 000000c0 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q.. 000000d8 : 42 4d 00 14 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 51 00 f4 BM...................Q..","title":"PMS3003"},{"location":"sensors/Plantower/#pmsx003","text":"info About the sensors supported by the PMSx003 protocol ( -m PMSx003 ) pms -m PMSx003 info Plantower PMS1003, PMS5003, PMS7003 and PMSA003 sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 number concentrations over X.Y um [#/cm3] String formats: pm (default), raw, cf, num, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMSx003 -n 10 -i 10 serial 2020-09-27 17:16:10: PM1 0.0, PM2.5 8.0, PM10 8.0 \u03bcg/m3 2020-09-27 17:16:20: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:16:30: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:16:40: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:16:50: PM1 0.0, PM2.5 7.0, PM10 7.0 \u03bcg/m3 2020-09-27 17:17:00: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:10: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:20: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:30: PM1 0.0, PM2.5 6.0, PM10 6.0 \u03bcg/m3 2020-09-27 17:17:40: PM1 0.0, PM2.5 5.0, PM10 5.0 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m PMSx003 -n 10 -i 10 serial -f csv time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 1601219770, 0, 8, 8, 0.0, 8.0, 8.0, 2.10, 0.70, 0.45, 0.30, 0.00, 0.00 1601219780, 0, 7, 7, 0.0, 7.0, 7.0, 2.10, 0.70, 0.45, 0.30, 0.00, 0.00 1601219790, 0, 7, 7, 0.0, 7.0, 7.0, 1.89, 0.63, 0.42, 0.27, 0.00, 0.00 1601219800, 0, 7, 7, 0.0, 7.0, 7.0, 1.80, 0.60, 0.39, 0.24, 0.00, 0.00 1601219810, 0, 7, 7, 0.0, 7.0, 7.0, 1.80, 0.60, 0.39, 0.24, 0.00, 0.00 1601219820, 0, 6, 6, 0.0, 6.0, 6.0, 1.80, 0.60, 0.29, 0.21, 0.00, 0.00 1601219830, 0, 6, 6, 0.0, 6.0, 6.0, 1.80, 0.60, 0.29, 0.21, 0.00, 0.00 1601219840, 0, 6, 6, 0.0, 6.0, 6.0, 1.59, 0.53, 0.26, 0.18, 0.00, 0.00 1601219850, 0, 6, 6, 0.0, 6.0, 6.0, 1.59, 0.53, 0.26, 0.18, 0.00, 0.00 1601219860, 0, 5, 5, 0.0, 5.0, 5.0, 1.38, 0.46, 0.23, 0.15, 0.00, 0.00 hexdump Print on hexdump format ( -f hexdump ) pms -m PMSx003 -n 10 -i 10 serial -f hexdump 00000000 : 42 4d 00 1c 00 00 00 08 00 08 00 00 00 08 00 08 00 d2 00 46 00 2d 00 1e 00 00 00 00 97 00 02 c5 BM.................F.-.......... 00000020 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 d2 00 46 00 2d 00 1e 00 00 00 00 97 00 02 c1 BM.................F.-.......... 00000040 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 bd 00 3f 00 2a 00 1b 00 00 00 00 97 00 02 9f BM.................?.*.......... 00000060 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 b4 00 3c 00 27 00 18 00 00 00 00 97 00 02 8d BM.................<.'.......... 00000080 : 42 4d 00 1c 00 00 00 07 00 07 00 00 00 07 00 07 00 b4 00 3c 00 27 00 18 00 00 00 00 97 00 02 8d BM.................<.'.......... 000000a0 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 b4 00 3c 00 1d 00 15 00 00 00 00 97 00 02 7c BM.................<...........| 000000c0 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 b4 00 3c 00 1d 00 15 00 00 00 00 97 00 02 7c BM.................<...........| 000000e0 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 9f 00 35 00 1a 00 12 00 00 00 00 97 00 02 5a BM.................5...........Z 00000100 : 42 4d 00 1c 00 00 00 06 00 06 00 00 00 06 00 06 00 9f 00 35 00 1a 00 12 00 00 00 00 97 00 02 5a BM.................5...........Z 00000120 : 42 4d 00 1c 00 00 00 05 00 05 00 00 00 05 00 05 00 8a 00 2e 00 17 00 0f 00 00 00 00 97 00 02 34 BM.............................4","title":"PMSx003"},{"location":"sensors/Plantower/#pms5003t","text":"info About the PMS5003T sensor ( -m PMS5003T ) pms -m PMS5003T info Plantower PMS5003T sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5 number concentrations over X.Y um [#/cm3] temp temperature [\u00b0C] rhum relative humidity [%] String formats: pm (default), raw, cf, num, atm, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS5003T -n 10 -i 10 serial 2021-02-02 07:27:57: PM1 22.0, PM2.5 35.0, PM10 41.0 \u03bcg/m3 2021-02-02 07:28:07: PM1 20.0, PM2.5 33.0, PM10 36.0 \u03bcg/m3 2021-02-02 07:28:17: PM1 20.0, PM2.5 34.0, PM10 38.0 \u03bcg/m3 2021-02-02 07:28:27: PM1 19.0, PM2.5 32.0, PM10 42.0 \u03bcg/m3 2021-02-02 07:28:37: PM1 22.0, PM2.5 35.0, PM10 38.0 \u03bcg/m3 2021-02-02 07:28:47: PM1 21.0, PM2.5 34.0, PM10 39.0 \u03bcg/m3 2021-02-02 07:28:57: PM1 21.0, PM2.5 33.0, PM10 42.0 \u03bcg/m3 2021-02-02 07:29:07: PM1 22.0, PM2.5 34.0, PM10 45.0 \u03bcg/m3 2021-02-02 07:29:17: PM1 20.0, PM2.5 32.0, PM10 44.0 \u03bcg/m3 2021-02-02 07:29:27: PM1 19.0, PM2.5 32.0, PM10 43.0 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m PMS5003T -n 10 -i 10 serial -f csv time, raw01, raw25, raw10, pm01, pm25, pm10, n0_3, n0_5, n1_0, n2_5, temp, rhum 1612247277, 23, 39, 41, 22.0, 35.0, 41.0, 41.04, 11.93, 2.78, 0.12, 21.2, 22.4 1612247287, 21, 36, 36, 20.0, 33.0, 36.0, 35.28, 10.55, 2.28, 0.14, 21.2, 22.4 1612247297, 21, 37, 38, 20.0, 34.0, 38.0, 38.40, 11.26, 2.50, 0.22, 21.2, 22.4 1612247307, 20, 35, 42, 19.0, 32.0, 42.0, 37.50, 10.79, 2.62, 0.30, 21.2, 22.3 1612247317, 23, 38, 38, 22.0, 35.0, 38.0, 38.16, 11.22, 2.86, 0.14, 21.2, 22.4 1612247327, 22, 37, 39, 21.0, 34.0, 39.0, 38.37, 11.14, 2.88, 0.20, 21.2, 22.3 1612247337, 22, 36, 42, 21.0, 33.0, 42.0, 37.59, 11.10, 2.82, 0.22, 21.2, 22.3 1612247347, 23, 37, 45, 22.0, 34.0, 45.0, 38.37, 11.35, 2.92, 0.22, 21.3, 22.2 1612247357, 21, 35, 44, 20.0, 32.0, 44.0, 37.86, 11.14, 2.86, 0.24, 21.3, 22.2 1612247367, 20, 34, 43, 19.0, 32.0, 43.0, 36.03, 10.44, 2.72, 0.30, 21.3, 22.3 hexdump Print on hexdump format ( -f hexdump ) pms -m PMS5003T -n 10 -i 10 serial -f hexdump 00000000 : 42 4d 00 1c 00 17 00 27 00 29 00 16 00 23 00 29 10 08 04 a9 01 16 00 0c 00 d4 00 e0 9a 00 04 aa BM.....'.)...#.)................ 00000020 : 42 4d 00 1c 00 15 00 24 00 24 00 14 00 21 00 24 0d c8 04 1f 00 e4 00 0e 00 d4 00 e0 9a 00 05 99 BM.....$.$...!.$................ 00000040 : 42 4d 00 1c 00 15 00 25 00 26 00 14 00 22 00 26 0f 00 04 66 00 fa 00 16 00 d4 00 e0 9a 00 05 3e BM.....%.&...\".&...f...........> 00000060 : 42 4d 00 1c 00 14 00 23 00 2a 00 13 00 20 00 2a 0e a6 04 37 01 06 00 1e 00 d4 00 df 9a 00 04 ca BM.....#.*... .*...7............ 00000080 : 42 4d 00 1c 00 17 00 26 00 26 00 16 00 23 00 26 0e e8 04 62 01 1e 00 0e 00 d4 00 e0 9a 00 05 44 BM.....&.&...#.&...b...........D 000000a0 : 42 4d 00 1c 00 16 00 25 00 27 00 15 00 22 00 27 0e fd 04 5a 01 20 00 14 00 d4 00 df 9a 00 05 56 BM.....%.'...\".'...Z. .........V 000000c0 : 42 4d 00 1c 00 16 00 24 00 2a 00 15 00 21 00 2a 0e af 04 56 01 1a 00 16 00 d4 00 df 9a 00 05 04 BM.....$.*...!.*...V............ 000000e0 : 42 4d 00 1c 00 17 00 25 00 2d 00 16 00 22 00 2d 0e fd 04 6f 01 24 00 16 00 d5 00 de 9a 00 05 7f BM.....%.-...\".-...o.$.......... 00000100 : 42 4d 00 1c 00 15 00 23 00 2c 00 14 00 20 00 2c 0e ca 04 5a 01 1e 00 18 00 d5 00 de 9a 00 05 29 BM.....#.,... .,...Z...........) 00000120 : 42 4d 00 1c 00 14 00 22 00 2b 00 13 00 20 00 2b 0e 13 04 14 01 10 00 1e 00 d5 00 df 9a 00 04 20 BM.....\".+... .+...............","title":"PMS5003T"},{"location":"sensors/Plantower/#pms5003s","text":"info About the PMS5003S sensor ( -m PMS5003S ) pms -m PMS5003S info Plantower PMS5003S sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 number concentrations over X.Y um [#/cm3] HCHO formaldehyde concentration [mg/m3] String formats: pm (default), raw, cf, num, hcho, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS5003S -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m PMS5003S -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m PMS5003S -n 10 -i 10 serial -f hexdump","title":"PMS5003S"},{"location":"sensors/Plantower/#pms5003st","text":"info About the PMS5003ST sensor ( -m PMS5003ST ) pms -m PMS5003ST info Plantower PMS5003ST sensor observations time measurement time [seconds since epoch] raw01, raw25, raw10 cf=1 PM estimates [\u03bcg/m3] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] n0_3, n0_5, n1_0, n2_5, n5_0, n10_0 number concentrations over X.Y um [#/cm3] HCHO formaldehyde concentration [mg/m3] temp temperature [\u00b0C] rhum relative humidity [%] String formats: pm (default), raw, cf, num, hcho, atm, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m PMS5003ST -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m PMS5003ST -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m PMS5003ST -n 10 -i 10 serial -f hexdump","title":"PMS5003ST"},{"location":"sensors/Sensirion/","text":"Sensirion sensors sensor Sensor --sensor-model PM1 PM2.5 PM4 PM10 size bins Other SPS30 SPS30 5 typical particle size datasheet Sensor Datasheet Dimensions Connector SPS30 en 5 pin Connector 5 pin 5 pin JST ZH (1.50mm pitch) Pin Name Voltage Function 1 VDD 5V\u00b110% 2 RX/SDA 3.3V/5V TTL serial port/I2C 3 TX/SCL 3.3V/5V TTL serial port/I2C 4 SEL floating/GND floating for UART, GND for I2C 5 GND 0V Protocol Serial protocol is UART 115200 8N1 5V TTL 3.3V compatible. commands Note The SPS30 only support continuous operation, at about one measurement per second. However, new measurements are not streamed. Each measurement has to be requested. This behavior is consistent with passive_mode /single-shot operation in other sensors. The sleep / wake commands listed here (stop measurement/start measurement on the datasheet ), behave consistently with the rest of the supported PM sensors. There are also deep-sleep / wake-up commands (sleep/wake-up on the datasheet ), which are not implemented. As deep-sleep disable the UART interface and wake-up is a 2 stage procedure. Command Description message active_mode continuous operation N/A passive_mode single-shot operation N/A passive_read request last measurement 7E 00 03 00 FC 7E sleep idle mode 7E 00 01 00 FE 7E wake wake up from idle mode 7E 00 00 02 01 03 F9 7E message Messages containing measurements consist of floats. The second to last bit of the message should contain 0xFF-sum(message[1:-2])%0x100 . message SPS30 47 bits header 5 bits 7E 00 03 00 28 body 40 bits 10 values checksum 1 bit tail 1 bit 7E SPS30 The message body ( message[5:-2] ) contains 10 values: pm01, pm25, pm04, pm10: PM1.0, PM2.5, PM4.0, PM10 [ug/m\u00b3] n0_5, n1_0, n2_5, n4_0, n10_0: number concentrations under X.Y um [#/cm\u00b3] diam: typical particle size [\u03bcm] SPS30 info About the SPS30 sensor ( -m SPS30 ) pms -m SPS30 info Sensirion SPS30 sensor observations time measurement time [seconds since epoch] pm01, pm25, pm04, pm10 PM1.0, PM2.5, PM4.0, PM10 [\u03bcg/m3] n0_5, n1_0, n2_5, n4_0, n10_0 number concentrations between 0.3 and X.Y um [#/cm3] diam typical particle size [\u03bcm] String formats: pm (default), num, diam, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m SPS30 -n 10 -i 10 serial 2021-09-07 07:05:00: PM1 5.2, PM2.5 9.5, PM4 12.6, PM10 13.3 \u03bcg/m3 2021-09-07 07:05:10: PM1 5.8, PM2.5 8.2, PM4 9.9, PM10 10.2 \u03bcg/m3 2021-09-07 07:05:20: PM1 7.0, PM2.5 9.1, PM4 10.5, PM10 10.8 \u03bcg/m3 2021-09-07 07:05:30: PM1 7.8, PM2.5 9.9, PM4 11.2, PM10 11.5 \u03bcg/m3 2021-09-07 07:05:40: PM1 8.3, PM2.5 10.5, PM4 11.8, PM10 12.1 \u03bcg/m3 2021-09-07 07:05:50: PM1 8.2, PM2.5 10.2, PM4 11.4, PM10 11.7 \u03bcg/m3 2021-09-07 07:06:40: PM1 8.4, PM2.5 10.4, PM4 11.6, PM10 11.8 \u03bcg/m3 2021-09-07 07:05:10: PM1 8.5, PM2.5 10.4, PM4 11.5, PM10 11.7 \u03bcg/m3 2021-09-07 07:07:00: PM1 8.8, PM2.5 10.7, PM4 11.8, PM10 12.1 \u03bcg/m3 2021-09-07 07:07:10: PM1 8.5, PM2.5 10.3, PM4 11.4, PM10 11.6 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m SPS30 -n 10 -i 10 csv time, pm01, pm25, pm04, pm10, n0_5, n1_0, n2_5, n4_0, n10_0, diam 1630991100, 5.2, 9.5, 12.6, 13.3, 26.31, 37.00, 41.52, 42.41, 42.54, 0.8 1630991110, 5.8, 8.2, 9.9, 10.2, 35.09, 43.75, 46.20, 46.67, 46.75, 0.8 1630991120, 7.0, 9.1, 10.5, 10.8, 44.12, 53.44, 55.51, 55.91, 55.97, 0.8 1630991130, 7.8, 9.9, 11.2, 11.5, 50.39, 60.42, 62.40, 62.78, 62.84, 0.7 1630991140, 8.3, 10.5, 11.8, 12.1, 53.64, 64.24, 66.29, 66.68, 66.75, 0.7 1630991150, 8.2, 10.2, 11.4, 11.7, 53.40, 63.68, 65.56, 65.91, 65.97, 0.7 1630991200, 8.4, 10.4, 11.6, 11.8, 54.85, 65.26, 67.09, 67.44, 67.50, 0.7 1630991210, 8.5, 10.4, 11.5, 11.7, 55.52, 65.91, 67.66, 68.00, 68.05, 0.7 1630991220, 8.8, 10.7, 11.8, 12.1, 57.40, 68.09, 69.87, 70.21, 70.27, 0.7 1630991230, 8.5, 10.3, 11.4, 11.6, 55.63, 65.90, 67.56, 67.88, 67.94, 0.7 hexdump Print on hexdump format ( -f hexdump ) pms -m SPS30 -n 10 -i 10 serial -f hexdump 00000000 : 7e 00 03 00 28 40 a7 83 20 41 17 77 bb 41 4a 5f 83 41 54 8d dd 41 d2 83 3e 42 7d 33 fc 85 42 26 17 22 42 29 a4 d9 42 2a 29 bc 3f 55 b7 e7 9e 7e ....(@.. A.w.AJ_.AT..A..>B}3..B&.\"B)..B*).?U.... 0000002f : 7e 00 03 00 28 40 b9 c6 7f 41 03 6c 8b 41 1e 4a e2 41 23 aa 92 42 0c 5b 7c 42 2e fd ba 42 38 ca b3 42 3a b2 c9 42 3a fd e9 3f 4a 10 25 d6 7e ....(@...A.l.A.J.A#..B.[|B... B8 ..B:..B:..?J.%.. 00000064 : 7e 00 03 00 28 40 df 03 da 41 7d 31 62 ae 41 27 9e 32 41 2c 10 7d 5e 42 30 7d 5e d3 42 55 c0 4c 42 5e 09 08 42 5f a2 8a 42 5f e4 43 3f 40 fa 1f ff 7e ....(@...A} 1b .A'. 2A ,.}^ B0 }^.BU.LB^..B_..B_.C?@.... 00000090 : 7e 00 03 00 28 40 fa 9f ee 41 1e 6a 7d 33 41 33 60 81 41 37 91 cd 42 49 8e c8 42 71 b1 18 42 79 9a b4 42 7b 20 1b 42 7b 60 21 3f 3c a4 c4 87 7e ....(@...A.j} 3A 3`. A7 ..BI..Bq..By..B{ .B{`!?<.... 000000c0 : 7e 00 03 00 28 41 05 1c 4c 41 27 8b 14 41 3d 38 59 41 41 8e 35 42 56 92 6c 42 80 79 7c 42 84 93 12 42 85 5c b2 42 85 7d 5d fb 3f 3e 67 ea 31 7e ....(A..LA'..A=8Y AA . 5B V.lB.y|B...B.\\.B.}].?>g.1. 000000f5 : 7e 00 03 00 28 41 03 9f 9e 41 23 7d 5e 0b 41 37 29 dc 41 3b 18 f8 42 55 95 4a 42 7d 5e ba 00 42 83 1c 73 42 83 d4 4c 42 83 f3 10 3f 3e 00 79 76 7e ....(A...A#}^. A7 ).A;..BU.JB}^..B..sB..LB...?>.yv. 00000120 : 7e 00 03 00 28 41 06 b1 47 41 26 09 7d 5d 41 39 24 19 41 3c f6 37 42 5b 61 d6 42 82 85 77 42 86 2d ad 42 86 e0 ca 42 86 ff 03 3f 3d 19 e5 5b 7e ....(A.. GA &.}] A9 $.A<. 7B [a.B..wB.-.B...B...?=..[. 00000149 : 7e 00 03 00 28 41 07 d4 61 41 26 1c 2a 41 38 4c cf 41 3b f0 1a 42 5e 17 d0 42 83 d2 21 42 87 52 70 42 87 fd 97 42 88 1a c2 3f 3e 47 c7 38 7e ....(A.. aA &.* A8 L.A;..B^..B..!B.RpB...B...?>G.8. 00000178 : 7e 00 03 00 28 41 0c 43 87 41 2b 1e da 41 3d 92 1e 41 41 42 bc 42 65 9c 10 42 88 2f 76 42 8b be 32 42 8c 6c 00 42 8c 89 b8 3f 3e 5a 83 89 7e ....(A.C.A+..A=.. AA B. Be ..B./vB.. 2B .l.B...?>Z... 000001a7 : 7e 00 03 00 28 41 07 9f e5 41 24 a7 bf 41 35 d7 db 41 39 47 db 42 5e 89 35 42 83 cd 07 42 87 20 a7 42 87 c2 f8 42 87 de e9 3f 3d be a6 ff 7e ....(A...A$.. A5 .. A9 G.B^. 5B ...B. .B...B...?=....","title":"Sensirion"},{"location":"sensors/Sensirion/#sensirion-sensors","text":"sensor Sensor --sensor-model PM1 PM2.5 PM4 PM10 size bins Other SPS30 SPS30 5 typical particle size datasheet Sensor Datasheet Dimensions Connector SPS30 en 5 pin","title":"Sensirion sensors"},{"location":"sensors/Sensirion/#connector","text":"5 pin 5 pin JST ZH (1.50mm pitch) Pin Name Voltage Function 1 VDD 5V\u00b110% 2 RX/SDA 3.3V/5V TTL serial port/I2C 3 TX/SCL 3.3V/5V TTL serial port/I2C 4 SEL floating/GND floating for UART, GND for I2C 5 GND 0V","title":"Connector"},{"location":"sensors/Sensirion/#protocol","text":"Serial protocol is UART 115200 8N1 5V TTL 3.3V compatible. commands Note The SPS30 only support continuous operation, at about one measurement per second. However, new measurements are not streamed. Each measurement has to be requested. This behavior is consistent with passive_mode /single-shot operation in other sensors. The sleep / wake commands listed here (stop measurement/start measurement on the datasheet ), behave consistently with the rest of the supported PM sensors. There are also deep-sleep / wake-up commands (sleep/wake-up on the datasheet ), which are not implemented. As deep-sleep disable the UART interface and wake-up is a 2 stage procedure. Command Description message active_mode continuous operation N/A passive_mode single-shot operation N/A passive_read request last measurement 7E 00 03 00 FC 7E sleep idle mode 7E 00 01 00 FE 7E wake wake up from idle mode 7E 00 00 02 01 03 F9 7E message Messages containing measurements consist of floats. The second to last bit of the message should contain 0xFF-sum(message[1:-2])%0x100 . message SPS30 47 bits header 5 bits 7E 00 03 00 28 body 40 bits 10 values checksum 1 bit tail 1 bit 7E SPS30 The message body ( message[5:-2] ) contains 10 values: pm01, pm25, pm04, pm10: PM1.0, PM2.5, PM4.0, PM10 [ug/m\u00b3] n0_5, n1_0, n2_5, n4_0, n10_0: number concentrations under X.Y um [#/cm\u00b3] diam: typical particle size [\u03bcm]","title":"Protocol"},{"location":"sensors/Sensirion/#sps30","text":"info About the SPS30 sensor ( -m SPS30 ) pms -m SPS30 info Sensirion SPS30 sensor observations time measurement time [seconds since epoch] pm01, pm25, pm04, pm10 PM1.0, PM2.5, PM4.0, PM10 [\u03bcg/m3] n0_5, n1_0, n2_5, n4_0, n10_0 number concentrations between 0.3 and X.Y um [#/cm3] diam typical particle size [\u03bcm] String formats: pm (default), num, diam, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m SPS30 -n 10 -i 10 serial 2021-09-07 07:05:00: PM1 5.2, PM2.5 9.5, PM4 12.6, PM10 13.3 \u03bcg/m3 2021-09-07 07:05:10: PM1 5.8, PM2.5 8.2, PM4 9.9, PM10 10.2 \u03bcg/m3 2021-09-07 07:05:20: PM1 7.0, PM2.5 9.1, PM4 10.5, PM10 10.8 \u03bcg/m3 2021-09-07 07:05:30: PM1 7.8, PM2.5 9.9, PM4 11.2, PM10 11.5 \u03bcg/m3 2021-09-07 07:05:40: PM1 8.3, PM2.5 10.5, PM4 11.8, PM10 12.1 \u03bcg/m3 2021-09-07 07:05:50: PM1 8.2, PM2.5 10.2, PM4 11.4, PM10 11.7 \u03bcg/m3 2021-09-07 07:06:40: PM1 8.4, PM2.5 10.4, PM4 11.6, PM10 11.8 \u03bcg/m3 2021-09-07 07:05:10: PM1 8.5, PM2.5 10.4, PM4 11.5, PM10 11.7 \u03bcg/m3 2021-09-07 07:07:00: PM1 8.8, PM2.5 10.7, PM4 11.8, PM10 12.1 \u03bcg/m3 2021-09-07 07:07:10: PM1 8.5, PM2.5 10.3, PM4 11.4, PM10 11.6 \u03bcg/m3 csv Print on CSV format ( -f csv ) pms -m SPS30 -n 10 -i 10 csv time, pm01, pm25, pm04, pm10, n0_5, n1_0, n2_5, n4_0, n10_0, diam 1630991100, 5.2, 9.5, 12.6, 13.3, 26.31, 37.00, 41.52, 42.41, 42.54, 0.8 1630991110, 5.8, 8.2, 9.9, 10.2, 35.09, 43.75, 46.20, 46.67, 46.75, 0.8 1630991120, 7.0, 9.1, 10.5, 10.8, 44.12, 53.44, 55.51, 55.91, 55.97, 0.8 1630991130, 7.8, 9.9, 11.2, 11.5, 50.39, 60.42, 62.40, 62.78, 62.84, 0.7 1630991140, 8.3, 10.5, 11.8, 12.1, 53.64, 64.24, 66.29, 66.68, 66.75, 0.7 1630991150, 8.2, 10.2, 11.4, 11.7, 53.40, 63.68, 65.56, 65.91, 65.97, 0.7 1630991200, 8.4, 10.4, 11.6, 11.8, 54.85, 65.26, 67.09, 67.44, 67.50, 0.7 1630991210, 8.5, 10.4, 11.5, 11.7, 55.52, 65.91, 67.66, 68.00, 68.05, 0.7 1630991220, 8.8, 10.7, 11.8, 12.1, 57.40, 68.09, 69.87, 70.21, 70.27, 0.7 1630991230, 8.5, 10.3, 11.4, 11.6, 55.63, 65.90, 67.56, 67.88, 67.94, 0.7 hexdump Print on hexdump format ( -f hexdump ) pms -m SPS30 -n 10 -i 10 serial -f hexdump 00000000 : 7e 00 03 00 28 40 a7 83 20 41 17 77 bb 41 4a 5f 83 41 54 8d dd 41 d2 83 3e 42 7d 33 fc 85 42 26 17 22 42 29 a4 d9 42 2a 29 bc 3f 55 b7 e7 9e 7e ....(@.. A.w.AJ_.AT..A..>B}3..B&.\"B)..B*).?U.... 0000002f : 7e 00 03 00 28 40 b9 c6 7f 41 03 6c 8b 41 1e 4a e2 41 23 aa 92 42 0c 5b 7c 42 2e fd ba 42 38 ca b3 42 3a b2 c9 42 3a fd e9 3f 4a 10 25 d6 7e ....(@...A.l.A.J.A#..B.[|B... B8 ..B:..B:..?J.%.. 00000064 : 7e 00 03 00 28 40 df 03 da 41 7d 31 62 ae 41 27 9e 32 41 2c 10 7d 5e 42 30 7d 5e d3 42 55 c0 4c 42 5e 09 08 42 5f a2 8a 42 5f e4 43 3f 40 fa 1f ff 7e ....(@...A} 1b .A'. 2A ,.}^ B0 }^.BU.LB^..B_..B_.C?@.... 00000090 : 7e 00 03 00 28 40 fa 9f ee 41 1e 6a 7d 33 41 33 60 81 41 37 91 cd 42 49 8e c8 42 71 b1 18 42 79 9a b4 42 7b 20 1b 42 7b 60 21 3f 3c a4 c4 87 7e ....(@...A.j} 3A 3`. A7 ..BI..Bq..By..B{ .B{`!?<.... 000000c0 : 7e 00 03 00 28 41 05 1c 4c 41 27 8b 14 41 3d 38 59 41 41 8e 35 42 56 92 6c 42 80 79 7c 42 84 93 12 42 85 5c b2 42 85 7d 5d fb 3f 3e 67 ea 31 7e ....(A..LA'..A=8Y AA . 5B V.lB.y|B...B.\\.B.}].?>g.1. 000000f5 : 7e 00 03 00 28 41 03 9f 9e 41 23 7d 5e 0b 41 37 29 dc 41 3b 18 f8 42 55 95 4a 42 7d 5e ba 00 42 83 1c 73 42 83 d4 4c 42 83 f3 10 3f 3e 00 79 76 7e ....(A...A#}^. A7 ).A;..BU.JB}^..B..sB..LB...?>.yv. 00000120 : 7e 00 03 00 28 41 06 b1 47 41 26 09 7d 5d 41 39 24 19 41 3c f6 37 42 5b 61 d6 42 82 85 77 42 86 2d ad 42 86 e0 ca 42 86 ff 03 3f 3d 19 e5 5b 7e ....(A.. GA &.}] A9 $.A<. 7B [a.B..wB.-.B...B...?=..[. 00000149 : 7e 00 03 00 28 41 07 d4 61 41 26 1c 2a 41 38 4c cf 41 3b f0 1a 42 5e 17 d0 42 83 d2 21 42 87 52 70 42 87 fd 97 42 88 1a c2 3f 3e 47 c7 38 7e ....(A.. aA &.* A8 L.A;..B^..B..!B.RpB...B...?>G.8. 00000178 : 7e 00 03 00 28 41 0c 43 87 41 2b 1e da 41 3d 92 1e 41 41 42 bc 42 65 9c 10 42 88 2f 76 42 8b be 32 42 8c 6c 00 42 8c 89 b8 3f 3e 5a 83 89 7e ....(A.C.A+..A=.. AA B. Be ..B./vB.. 2B .l.B...?>Z... 000001a7 : 7e 00 03 00 28 41 07 9f e5 41 24 a7 bf 41 35 d7 db 41 39 47 db 42 5e 89 35 42 83 cd 07 42 87 20 a7 42 87 c2 f8 42 87 de e9 3f 3d be a6 ff 7e ....(A...A$.. A5 .. A9 G.B^. 5B ...B. .B...B...?=....","title":"SPS30"},{"location":"sensors/Winsen/","text":"Winsen sensors Warning This sensors are 3.3V devices. They require 5V power to operate. However, on some sensors the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM1 PM2.5 PM10 CO2 MH-Z19B MHZ19B ZH03B ZH0xx ZH06-I ZH0xx datasheet Sensor Datasheet Dimensions Connector MH-Z19B en 40\u00d720\u00d79 mm\u00b3 7 pin ZH03B en 50x32x21 mm\u00b3 8 pin ZH06-I en 47\u00d737\u00d712 mm\u00b3 8 pin Connector 7 pin 7 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1/2 reserved 3 GND 0V 4 VCC 5V 5 RX 3.3V TTL serial port 6 TX 3.3V TTL serial port 7 reserved 8 pin 8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1 VCC 5V 2 GND 0V 3 reserved 4 RX 3.3V TTL serial port 5 TX 3.3V TTL serial port 6/7 NC reserved 8 PWM 3.3V PWM PM2.5 0-1000 \u03bcg/m\u00b3 Protocol Serial protocol is UART 9600 8N1 3.3V TTL. Note The MHZ19B datasheet advertized interface as 5V tolerant. However, the this sensor has only been tested with a 3.3V interface. The datasheet also mentions that this sensor needs to warm up for 180 s. Therefore, no measurements will be requested until the warm up period is completed. commands Command --sensor-model Description message active_mode ZH0xx continuous operation FF 01 78 40 00 00 00 00 47 passive_mode ZH0xx & MHZ19B single-shot operation FF 01 78 41 00 00 00 00 46 passive_read ZH0xx trigger single-shot measurement FF 01 86 00 00 00 00 00 79 sleep ZH0xx sleep mode FF 01 A7 01 00 00 00 00 57 wake ZH0xx wake up from sleep mode FF 01 A7 00 00 00 00 00 58 MHZ19B 400 ppm CO2 (zero point) calibration FF 01 87 00 00 00 00 00 78 MHZ19B 1000 ppm CO2 (span point) calibration FF 01 88 03 E8 00 00 00 8C MHZ19B 2000 ppm CO2 (span point) calibration FF 01 88 07 D0 00 00 00 A0 message Messages containing measurements consist of unsigned short integers. The last bit of the message should contain 0x100 - sum(message[1:-1]) % 0x100 . message MHZ19B ZH0xx 9 bits 9 header 2 bits 2 bits FF 86 FF 86 body 6 bits 6 bits 1 values, 2 reserved 3 values checksum 1 bit 1 bit MHZ19B The message body ( message[2:4] ) contains 1 value: co2: CO2 concentration [ppm] ZH0xx The message body ( message[2:8] ) contains 3 values: pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3] MHZ19B info About the MHZ19B sensor ( -m MHZ19B ) pms -m MHZ19B info Winsen MH-Z19B sensor observations time measurement time [seconds since epoch] CO2 CO2 concentration [ppm] String formats: co2 (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m MHZ19B -n 10 -i 10 serial 2021-07-04 19:17:36: CO2 636 ppm 2021-07-04 19:17:46: CO2 636 ppm 2021-07-04 19:17:56: CO2 636 ppm 2021-07-04 19:18:06: CO2 636 ppm 2021-07-04 19:18:16: CO2 636 ppm 2021-07-04 19:18:26: CO2 636 ppm 2021-07-04 19:18:36: CO2 636 ppm 2021-07-04 19:18:46: CO2 636 ppm 2021-07-04 19:18:56: CO2 635 ppm 2021-07-04 19:19:06: CO2 633 ppm csv Print on CSV format ( -f csv ) pms -m MHZ19B -n 10 -i 10 serial -f csv time, CO2 1625419056, 636 1625419066, 636 1625419076, 636 1625419086, 636 1625419096, 636 1625419106, 636 1625419116, 636 1625419126, 636 1625419136, 635 1625419146, 633 hexdump Print on hexdump format ( -f hexdump ) pms -m MHZ19B -n 10 -i 10 serial -f hexdump 00000000 : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000009 : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000012 : ff 86 02 7c 42 00 00 00 ba ...|B.... 0000001b : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000024 : ff 86 02 7c 42 00 00 00 ba ...|B.... 0000002d : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000036 : ff 86 02 7c 42 00 00 00 ba ...|B.... 0000003f : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000048 : ff 86 02 7b 42 00 00 00 bb ...{B.... 00000051 : ff 86 02 79 42 00 00 00 bd ...yB.... ZH0xx info About the sensors supported by the ZH0xx protocol ( -m ZH0xx ) pms -m ZH0xx info Winsen ZH03B and ZH06-I sensor observations time measurement time [seconds since epoch] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m ZH0xx -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m ZH0xx -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m ZH0xx -n 10 -i 10 serial -f hexdump","title":"Winsen"},{"location":"sensors/Winsen/#winsen-sensors","text":"Warning This sensors are 3.3V devices. They require 5V power to operate. However, on some sensors the I/O pins are not 5V tolerant and the sensor will be damaged by 5V logic. sensor Sensor --sensor-model PM1 PM2.5 PM10 CO2 MH-Z19B MHZ19B ZH03B ZH0xx ZH06-I ZH0xx datasheet Sensor Datasheet Dimensions Connector MH-Z19B en 40\u00d720\u00d79 mm\u00b3 7 pin ZH03B en 50x32x21 mm\u00b3 8 pin ZH06-I en 47\u00d737\u00d712 mm\u00b3 8 pin","title":"Winsen sensors"},{"location":"sensors/Winsen/#connector","text":"7 pin 7 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1/2 reserved 3 GND 0V 4 VCC 5V 5 RX 3.3V TTL serial port 6 TX 3.3V TTL serial port 7 reserved 8 pin 8 pin Molex 1.25mm \"PicoBlade\" 51021 compatible, found online as 1.25mm JST. Pin Name Voltage Function 1 VCC 5V 2 GND 0V 3 reserved 4 RX 3.3V TTL serial port 5 TX 3.3V TTL serial port 6/7 NC reserved 8 PWM 3.3V PWM PM2.5 0-1000 \u03bcg/m\u00b3","title":"Connector"},{"location":"sensors/Winsen/#protocol","text":"Serial protocol is UART 9600 8N1 3.3V TTL. Note The MHZ19B datasheet advertized interface as 5V tolerant. However, the this sensor has only been tested with a 3.3V interface. The datasheet also mentions that this sensor needs to warm up for 180 s. Therefore, no measurements will be requested until the warm up period is completed. commands Command --sensor-model Description message active_mode ZH0xx continuous operation FF 01 78 40 00 00 00 00 47 passive_mode ZH0xx & MHZ19B single-shot operation FF 01 78 41 00 00 00 00 46 passive_read ZH0xx trigger single-shot measurement FF 01 86 00 00 00 00 00 79 sleep ZH0xx sleep mode FF 01 A7 01 00 00 00 00 57 wake ZH0xx wake up from sleep mode FF 01 A7 00 00 00 00 00 58 MHZ19B 400 ppm CO2 (zero point) calibration FF 01 87 00 00 00 00 00 78 MHZ19B 1000 ppm CO2 (span point) calibration FF 01 88 03 E8 00 00 00 8C MHZ19B 2000 ppm CO2 (span point) calibration FF 01 88 07 D0 00 00 00 A0 message Messages containing measurements consist of unsigned short integers. The last bit of the message should contain 0x100 - sum(message[1:-1]) % 0x100 . message MHZ19B ZH0xx 9 bits 9 header 2 bits 2 bits FF 86 FF 86 body 6 bits 6 bits 1 values, 2 reserved 3 values checksum 1 bit 1 bit MHZ19B The message body ( message[2:4] ) contains 1 value: co2: CO2 concentration [ppm] ZH0xx The message body ( message[2:8] ) contains 3 values: pm01, pm25, pm10: PM1.0, PM2.5, PM10 [\u03bcg/m\u00b3]","title":"Protocol"},{"location":"sensors/Winsen/#mhz19b","text":"info About the MHZ19B sensor ( -m MHZ19B ) pms -m MHZ19B info Winsen MH-Z19B sensor observations time measurement time [seconds since epoch] CO2 CO2 concentration [ppm] String formats: co2 (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m MHZ19B -n 10 -i 10 serial 2021-07-04 19:17:36: CO2 636 ppm 2021-07-04 19:17:46: CO2 636 ppm 2021-07-04 19:17:56: CO2 636 ppm 2021-07-04 19:18:06: CO2 636 ppm 2021-07-04 19:18:16: CO2 636 ppm 2021-07-04 19:18:26: CO2 636 ppm 2021-07-04 19:18:36: CO2 636 ppm 2021-07-04 19:18:46: CO2 636 ppm 2021-07-04 19:18:56: CO2 635 ppm 2021-07-04 19:19:06: CO2 633 ppm csv Print on CSV format ( -f csv ) pms -m MHZ19B -n 10 -i 10 serial -f csv time, CO2 1625419056, 636 1625419066, 636 1625419076, 636 1625419086, 636 1625419096, 636 1625419106, 636 1625419116, 636 1625419126, 636 1625419136, 635 1625419146, 633 hexdump Print on hexdump format ( -f hexdump ) pms -m MHZ19B -n 10 -i 10 serial -f hexdump 00000000 : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000009 : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000012 : ff 86 02 7c 42 00 00 00 ba ...|B.... 0000001b : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000024 : ff 86 02 7c 42 00 00 00 ba ...|B.... 0000002d : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000036 : ff 86 02 7c 42 00 00 00 ba ...|B.... 0000003f : ff 86 02 7c 42 00 00 00 ba ...|B.... 00000048 : ff 86 02 7b 42 00 00 00 bb ...{B.... 00000051 : ff 86 02 79 42 00 00 00 bd ...yB....","title":"MHZ19B"},{"location":"sensors/Winsen/#zh0xx","text":"info About the sensors supported by the ZH0xx protocol ( -m ZH0xx ) pms -m ZH0xx info Winsen ZH03B and ZH06-I sensor observations time measurement time [seconds since epoch] pm01, pm25, pm10 PM1.0, PM2.5, PM10 [\u03bcg/m3] String formats: pm (default), csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m ZH0xx -n 10 -i 10 serial csv Print on CSV format ( -f csv ) pms -m ZH0xx -n 10 -i 10 serial -f csv hexdump Print on hexdump format ( -f hexdump ) pms -m ZH0xx -n 10 -i 10 serial -f hexdump","title":"ZH0xx"},{"location":"sensors/mcu680/","text":"Bosch Sensortec sensors BME680 sensor The BME680 sensor from Bosch Sensortec measures relative humidity, barometric pressure, ambient temperature and gas (VOC). The open source driver provides raw measurements, such as the resistance of the gas sensing element. The heater element of gas sensor affects the temperature and humidity measurements. Compensated temperature and humidity measurements are available trough a closed source integration library ( BSEC ). The BSEC provides three air quality estimates derived from raw measurements: index of air quality (IAQ, 0-500); CO2 equivalent (eCO2, ppm); breath VOC (bVOC), ppm). Info For easy of use BSEC is also provided as an Arduino library , which can be installed using the platformio library manager as follows: pio lib install \"BSEC Software Library\" module The GY-MCU680v1 is a chinese module with an STM32F051K8 mirocontroller (\u03bcC) and 3.3V low-dropout regulator (LDO). The \u03bcC acts as UART bridge, providing BSEC outputs from the BME680 sensor. The \u03bcC and sensor operate at 3.3V, but the module can be interfaced at 5V as UART pins on the STM32F051K8 are 5V tolerant. The module also breaks out the BME680 I2C pins, which are not 5V tolerant. Protocol Under factory settings, the serial protocol is UART 9600 8N1 3.3V/5V TTL. Note The alternative 115200 BAUD rate is not supported. commands Command Description message active_mode continuous operation A5 56 02 FD passive_mode single-shot operation A5 56 01 FC passive_read request last measurement A5 56 01 FC sleep sleep mode wake wake up from sleep mode MCU680 Under the factory settings, the module provides 7 values packed on a 20 bit message. extra config The MCU680 can be further configured with the following commands: Description message note select output A5 55 XX YY XX |= 0x01 temperature XX |= 0x02 relative humidity XX |= 0x04 atmospheric pressure XX |= 0x08 IAQ accuracy XX |= 0x10 gas resistance XX |= 0x20 altitude estimate YY = ( 0xA5 + 0x55 + XX ) % 0x100 message checksum output all data A5 55 3F 39 factory setting 115200 BAUD rate A5 58 01 FE not supported 9600 BAUD rate A5 58 02 FF factory setting save settings A5 5A 01 00 save current settings to flash and reset reset settings A5 5A 02 01 restore factory settings MCU680 info About the MCU680 sensor ( -m MCU680 ) pms -m MCU680 info Bosh Sensortec BME680 sensor observations time measurement time [seconds since epoch] temp temperature [\u00b0C] rhum relative humidity [%] pres atmospheric pressure [hPa] IAQ_acc IAQ accuracy flag IAQ index of air quality [0--500] gas gas resistance [k\u03a9] alt altitude estimate [m above sea level] String formats: atm, bme (default), bsec, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m MCU680 -n 10 -i 10 serial 2020-09-27 17:20:52: Temp. 24.3 \u00b0C, Rel.Hum. 27.6 %, Press 1012.57 hPa, 40.7 k\u03a9 2020-09-27 17:21:02: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.53 hPa, 42.1 k\u03a9 2020-09-27 17:21:12: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.53 hPa, 43.8 k\u03a9 2020-09-27 17:21:22: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.55 hPa, 45.1 k\u03a9 2020-09-27 17:21:32: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.55 hPa, 46.4 k\u03a9 2020-09-27 17:21:42: Temp. 24.2 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 47.6 k\u03a9 2020-09-27 17:21:52: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 49.0 k\u03a9 2020-09-27 17:22:02: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 50.0 k\u03a9 2020-09-27 17:22:12: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.53 hPa, 51.4 k\u03a9 2020-09-27 17:22:22: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 52.4 k\u03a9 csv Print on CSV format ( -f csv) pms -m MCU680 -n 10 -i 10 serial -f csv time, temp, rhum, pres, IAQ_acc, IAQ, gas, alt 1601220052, 24.3, 27.6, 1012.57, 1, 25, 40.7, 5 1601220062, 24.2, 27.6, 1012.53, 1, 25, 42.1, 5 1601220072, 24.2, 27.6, 1012.53, 1, 25, 43.8, 5 1601220082, 24.2, 27.6, 1012.55, 1, 25, 45.1, 5 1601220092, 24.2, 27.6, 1012.55, 1, 25, 46.4, 5 1601220102, 24.2, 27.7, 1012.51, 1, 25, 47.6, 6 1601220112, 24.1, 27.7, 1012.51, 1, 25, 49.0, 6 1601220122, 24.1, 27.7, 1012.51, 1, 25, 50.0, 6 1601220132, 24.1, 27.7, 1012.53, 1, 25, 51.4, 5 1601220142, 24.1, 27.7, 1012.51, 1, 25, 52.4, 6 hexdump Print on hexdump format ( -f hexdump ) pms -m MCU680 -n 10 -i 10 serial -f hexdump 00000000 : 5a 5a 3f 0f 09 7d 0a c4 01 8b 89 00 19 00 00 9e f2 00 05 19 ZZ?..}.............. 00000014 : 5a 5a 3f 0f 09 79 0a c5 01 8b 85 00 19 00 00 a4 83 00 05 a9 ZZ?..y.............. 00000028 : 5a 5a 3f 0f 09 76 0a c8 01 8b 85 00 19 00 00 ab 32 00 05 5f ZZ?..v..........2.._ 0000003c : 5a 5a 3f 0f 09 74 0a c8 01 8b 87 00 19 00 00 b0 27 00 05 59 ZZ?..t..........'..Y 00000050 : 5a 5a 3f 0f 09 72 0a c9 01 8b 87 00 19 00 00 b5 33 00 05 69 ZZ?..r..........3..i 00000064 : 5a 5a 3f 0f 09 70 0a d0 01 8b 83 00 19 00 00 ba 05 00 06 42 ZZ?..p.............B 00000078 : 5a 5a 3f 0f 09 6f 0a d2 01 8b 83 00 19 00 00 bf 71 00 06 b4 ZZ?..o..........q... 0000008c : 5a 5a 3f 0f 09 6e 0a d0 01 8b 83 00 19 00 00 c3 6e 00 06 b2 ZZ?..n..........n... 000000a0 : 5a 5a 3f 0f 09 6c 0a cf 01 8b 85 00 19 00 00 c8 ee 00 05 35 ZZ?..l.............5 000000b4 : 5a 5a 3f 0f 09 6a 0a d0 01 8b 83 00 19 00 00 cc b0 00 06 f9 ZZ?..j..............","title":"Bosch Sensortec"},{"location":"sensors/mcu680/#bosch-sensortec-sensors","text":"","title":"Bosch Sensortec sensors"},{"location":"sensors/mcu680/#bme680","text":"sensor The BME680 sensor from Bosch Sensortec measures relative humidity, barometric pressure, ambient temperature and gas (VOC). The open source driver provides raw measurements, such as the resistance of the gas sensing element. The heater element of gas sensor affects the temperature and humidity measurements. Compensated temperature and humidity measurements are available trough a closed source integration library ( BSEC ). The BSEC provides three air quality estimates derived from raw measurements: index of air quality (IAQ, 0-500); CO2 equivalent (eCO2, ppm); breath VOC (bVOC), ppm). Info For easy of use BSEC is also provided as an Arduino library , which can be installed using the platformio library manager as follows: pio lib install \"BSEC Software Library\" module The GY-MCU680v1 is a chinese module with an STM32F051K8 mirocontroller (\u03bcC) and 3.3V low-dropout regulator (LDO). The \u03bcC acts as UART bridge, providing BSEC outputs from the BME680 sensor. The \u03bcC and sensor operate at 3.3V, but the module can be interfaced at 5V as UART pins on the STM32F051K8 are 5V tolerant. The module also breaks out the BME680 I2C pins, which are not 5V tolerant.","title":"BME680"},{"location":"sensors/mcu680/#protocol","text":"Under factory settings, the serial protocol is UART 9600 8N1 3.3V/5V TTL. Note The alternative 115200 BAUD rate is not supported. commands Command Description message active_mode continuous operation A5 56 02 FD passive_mode single-shot operation A5 56 01 FC passive_read request last measurement A5 56 01 FC sleep sleep mode wake wake up from sleep mode MCU680 Under the factory settings, the module provides 7 values packed on a 20 bit message. extra config The MCU680 can be further configured with the following commands: Description message note select output A5 55 XX YY XX |= 0x01 temperature XX |= 0x02 relative humidity XX |= 0x04 atmospheric pressure XX |= 0x08 IAQ accuracy XX |= 0x10 gas resistance XX |= 0x20 altitude estimate YY = ( 0xA5 + 0x55 + XX ) % 0x100 message checksum output all data A5 55 3F 39 factory setting 115200 BAUD rate A5 58 01 FE not supported 9600 BAUD rate A5 58 02 FF factory setting save settings A5 5A 01 00 save current settings to flash and reset reset settings A5 5A 02 01 restore factory settings","title":"Protocol"},{"location":"sensors/mcu680/#mcu680","text":"info About the MCU680 sensor ( -m MCU680 ) pms -m MCU680 info Bosh Sensortec BME680 sensor observations time measurement time [seconds since epoch] temp temperature [\u00b0C] rhum relative humidity [%] pres atmospheric pressure [hPa] IAQ_acc IAQ accuracy flag IAQ index of air quality [0--500] gas gas resistance [k\u03a9] alt altitude estimate [m above sea level] String formats: atm, bme (default), bsec, csv and header serial Read 10 samples ( -n 10 ), one sample every 10 seconds ( -i 10 ) pms -m MCU680 -n 10 -i 10 serial 2020-09-27 17:20:52: Temp. 24.3 \u00b0C, Rel.Hum. 27.6 %, Press 1012.57 hPa, 40.7 k\u03a9 2020-09-27 17:21:02: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.53 hPa, 42.1 k\u03a9 2020-09-27 17:21:12: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.53 hPa, 43.8 k\u03a9 2020-09-27 17:21:22: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.55 hPa, 45.1 k\u03a9 2020-09-27 17:21:32: Temp. 24.2 \u00b0C, Rel.Hum. 27.6 %, Press 1012.55 hPa, 46.4 k\u03a9 2020-09-27 17:21:42: Temp. 24.2 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 47.6 k\u03a9 2020-09-27 17:21:52: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 49.0 k\u03a9 2020-09-27 17:22:02: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 50.0 k\u03a9 2020-09-27 17:22:12: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.53 hPa, 51.4 k\u03a9 2020-09-27 17:22:22: Temp. 24.1 \u00b0C, Rel.Hum. 27.7 %, Press 1012.51 hPa, 52.4 k\u03a9 csv Print on CSV format ( -f csv) pms -m MCU680 -n 10 -i 10 serial -f csv time, temp, rhum, pres, IAQ_acc, IAQ, gas, alt 1601220052, 24.3, 27.6, 1012.57, 1, 25, 40.7, 5 1601220062, 24.2, 27.6, 1012.53, 1, 25, 42.1, 5 1601220072, 24.2, 27.6, 1012.53, 1, 25, 43.8, 5 1601220082, 24.2, 27.6, 1012.55, 1, 25, 45.1, 5 1601220092, 24.2, 27.6, 1012.55, 1, 25, 46.4, 5 1601220102, 24.2, 27.7, 1012.51, 1, 25, 47.6, 6 1601220112, 24.1, 27.7, 1012.51, 1, 25, 49.0, 6 1601220122, 24.1, 27.7, 1012.51, 1, 25, 50.0, 6 1601220132, 24.1, 27.7, 1012.53, 1, 25, 51.4, 5 1601220142, 24.1, 27.7, 1012.51, 1, 25, 52.4, 6 hexdump Print on hexdump format ( -f hexdump ) pms -m MCU680 -n 10 -i 10 serial -f hexdump 00000000 : 5a 5a 3f 0f 09 7d 0a c4 01 8b 89 00 19 00 00 9e f2 00 05 19 ZZ?..}.............. 00000014 : 5a 5a 3f 0f 09 79 0a c5 01 8b 85 00 19 00 00 a4 83 00 05 a9 ZZ?..y.............. 00000028 : 5a 5a 3f 0f 09 76 0a c8 01 8b 85 00 19 00 00 ab 32 00 05 5f ZZ?..v..........2.._ 0000003c : 5a 5a 3f 0f 09 74 0a c8 01 8b 87 00 19 00 00 b0 27 00 05 59 ZZ?..t..........'..Y 00000050 : 5a 5a 3f 0f 09 72 0a c9 01 8b 87 00 19 00 00 b5 33 00 05 69 ZZ?..r..........3..i 00000064 : 5a 5a 3f 0f 09 70 0a d0 01 8b 83 00 19 00 00 ba 05 00 06 42 ZZ?..p.............B 00000078 : 5a 5a 3f 0f 09 6f 0a d2 01 8b 83 00 19 00 00 bf 71 00 06 b4 ZZ?..o..........q... 0000008c : 5a 5a 3f 0f 09 6e 0a d0 01 8b 83 00 19 00 00 c3 6e 00 06 b2 ZZ?..n..........n... 000000a0 : 5a 5a 3f 0f 09 6c 0a cf 01 8b 85 00 19 00 00 c8 ee 00 05 35 ZZ?..l.............5 000000b4 : 5a 5a 3f 0f 09 6a 0a d0 01 8b 83 00 19 00 00 cc b0 00 06 f9 ZZ?..j..............","title":"MCU680"}]}